{"version":1,"state":{"208740b1-7a2a-4b41-9898-abed67039573":{"id":"208740b1-7a2a-4b41-9898-abed67039573","tags":{"auxBuilder":true,"auxColor":"clear","builderSleep":"@changeState(this, \"Disabled\", \"builderState\");","auxBuilderSortOrder":0,"commandShowHistory":"@server.browseHistory();\r\nplayer.goToDimension(\"auxHistory\");","commandSleep":"@whisper(this, \"builderSleep\");","commandGoto":"@let [dimension] = that;\r\nif (!dimension) {\r\n    return;\r\n}\r\nplayer.goToDimension(dimension);","commandDownload":"@player.downloadStory();","commandUpload":"@player.showUploadAuxFile();","commandShowDocs":"@player.openURL(\"https://docs.casualsimulation.com/docs/tags\");","builderWake":"@changeState(this, \"Enabled\", \"builderState\");","builderCommand":"@if (tags.builderState !== \"Enabled\") {\r\n    return;\r\n}\r\nwhisper(this, that.command, that.argument);","commandSummon":"@shout(\"summonDimensionBuilder\");","commandDeleteBot":"@destroy(that);","builderDebug":"@if (!tags.builderDebugging) {\r\n    return;\r\n}\r\nconsole.log(`[Builder] ${that}`);","builderDebugging":"false","builderStateEnabledOnExit":"@player.toast(`(${tags.builderName}) ZZZZzzzz.....`);\r\nplayer.hideChat();\r\nlet [helper] = whisper(this, \"builderGetPlayerHelper\", { create: false });\r\nif (helper) {\r\n    destroy(helper);\r\n}","commandShowSheet":"@let [dimension] = that || [];\r\nplayer.getBot().tags.sheetPortal = dimension ? dimension : player.getCurrentDimension();","commandCloneBot":"@const b = getBot(\"#id\", that);\r\nconst created = create(b, { creator: b.tags.creator });\r\nreturn created.id;","commandMakeBotIntoButton":"@const b = getBot(\"#id\", that);\r\nb.tags.onClick = `@player.toast(\"You clicked me!\");`;","commandMarkHistory":"@const day = new Date();\r\nserver.markHistory({\r\n    message: `Save on ${day.getFullYear()}/${day.getMonth()}/${day.getDate()}`\r\n});","commandNewStory":"@let [story] = that || [];\r\nif (story) {\r\n    server.setupStory(story);\r\n    const dimension = player.getCurrentDimension() || player.getBot().tags.sheetPortal;\r\n    player.openURL(`/?auxStory=${encodeURIComponent(story)}&pagePortal=${encodeURIComponent(dimension)}`);\r\n}","auxDestroyable":"false","auxLabel":"=tags.builderName","commandNewBuilder":"@let [name] = that || [];\r\nif (name) {\r\n    const existing = getBots(...getFilters(name));\r\n    if (existing.length > 0) {\r\n        player.toast(`Builder ${name} already exists`);\r\n        return;\r\n    }\r\n    const filters = getFilters(tags.builderName);\r\n    const mod = {\r\n        builderName: name\r\n    };\r\n    const builder = create(this, mod);\r\n    const others = getBots(...filters, byTag(\"#auxBuilderLibrary\"));\r\n    create(others, {\r\n        creator: builder.id,\r\n        builderName: name\r\n    });\r\n}\r\n\r\nfunction getFilters(name) {\r\n    return [byTag(\"#builderName\", name), bySpace(\"shared\")];\r\n}","onTapCode":"@const isShowChat = that === \"3342\";\r\nconst isHideChat = that.endsWith(\"5\");\r\nif (!isShowChat && !isHideChat) {\r\n    return;\r\n}\r\nconst [allowed] = whisper(this, \"builderShouldHandleBootstrap\");\r\nif (!allowed) {\r\n    return;\r\n}\r\nif (isShowChat) {\r\n    whisper(this, \"commandShowChat\");\r\n} else if(isHideChat) {\r\n    player.hideChat();\r\n}","onKeyUp":"@if (that.keys.indexOf(\"`\") < 0) {\r\n    return;\r\n}\r\n\r\nconst [allowed] = whisper(this, \"builderShouldHandleBootstrap\");\r\nif (!allowed) {\r\n    return;\r\n}\r\nwhisper(this, \"commandShowChat\");","builderSleepOthers":"@const builderName = tags.builderName;\r\nconst otherBuilders = getBots(byTag(\"#builderName\", v => v !== builderName));\r\nwhisper(otherBuilders, \"builderSleep\");","onClick":"@if (tags.builderState !== \"Enabled\") {\r\n    whisper(this, \"builderSleepOthers\");\r\n    whisper(this, \"builderWake\");\r\n} else {\r\n    whisper(this, \"builderGetPlayerHelper\", { create: true });\r\n    shout(\"builderOnClick\");\r\n}","builderName":"ab-1","builderShouldHandleBootstrap":"@const isActive = tags.builderState === \"Enabled\";\r\nif (isActive) {\r\n    return true;\r\n}\r\nif (tags.builderName === \"ab-1\") {\r\n    const activeBuilders = getBots(inDimension(\"auxBuilder\"), byTag(\"builderState\", \"Enabled\"));\r\n    return activeBuilders.length <= 0;\r\n}\r\nreturn false;\r\n","onChat":"@const wakeRegex = /^\\.\\.\\s?([\\s\\w-_]+)?$/gi;\r\nconst wakeResult = wakeRegex.exec(that.message);\r\nif (wakeResult) {\r\n    const [_, builderName] = wakeResult;\r\n    if (builderName === tags.builderName || (!builderName && tags.builderName === \"ab-1\")) {\r\n        whisper(this, \"builderSleepOthers\");\r\n        whisper(this, \"builderWake\");\r\n    }\r\n}\r\nconst commands = tags.chatCommands;\r\nfor(let command of commands) {\r\n    if (command.test) {\r\n        const result = command.test.exec(that.message);\r\n        if (!result) {\r\n            continue;\r\n        }\r\n        if (tags.builderState !== \"Enabled\") {\r\n            const otherActiveBuilders = getBots(\r\n                inDimension(\"#auxBuilder\"),\r\n                byTag(\"#builderName\", n => n !== tags.builderName),\r\n                byTag(\"#builderState\", \"Enabled\"));\r\n\r\n            if (otherActiveBuilders.length <= 0) {\r\n                player.toast(\"Builder is sleeping\");\r\n            }\r\n        } else {\r\n            shout(\"builderCommand\", { command: command.shout, argument: result.slice(1) });\r\n        }\r\n        break;\r\n    }\r\n}\r\n","commandAddHoverStateToBot":"@const b = getBot(\"#id\", that);\r\nb.tags.onPointerEnter = `@\r\nchangeState(this, \"Hovered\");\r\n`;\r\nb.tags.onPointerExit = `@\r\nchangeState(this, \"Normal\");\r\n`;\r\nb.tags.stateHoveredOnEnter = `@\r\ntags.auxScale = tags.hoveredScale;\r\n`;\r\nb.tags.stateHoveredOnExit = `@\r\ntags.auxScale = tags.normalScale;\r\n`;\r\nb.tags.hoveredScale = 1.2;\r\nb.tags.normalScale = 1;","auxStrokeColor":"=tags.builderState === \"Enabled\" ? tags.builderColor : \"black\";","builderSetColor":"@tags.builderColor = that;","auxLabelColor":"=tags.builderState === \"Enabled\" ? tags.builderColor : \"#fff\";","commandNewBot":"@const mod = that || { \r\n    dimension: player.getCurrentDimension(),\r\n    x: 0,\r\n    y: 0\r\n}\r\nshout(\"builderCopyBot\", { bot: mod });","commandChangeColor":"@player.showInputForTag(this, \"#builderColor\", {\n    type: \"color\",\n    subtype: \"basic\",\n    title: \"Change Builder Color\"\n});","onSaveInput":"@shout(\"builderSetColor\", tags.builderColor);","builderGetPlayerHelper":"@let filters = [byTag(\"#auxBuilderLibrary\", \"playerTemplate\"), byTag(\"#builderName\", tags.builderName)];\r\nlet helper = getBot(...filters, bySpace(\"tempLocal\"));\r\nif (!helper && that.create) {\r\n    const prefab = getBot(...filters);\r\n    helper = create(prefab, { \r\n        space: \"tempLocal\",\r\n        auxListening: true,\r\n        auxBuilderId: bot.id,\r\n        builderColor: tags.builderColor,\r\n    });\r\n}\r\n\r\nreturn helper;","commandListCommands":"@// TODO: Update to use something like Vue for HTML generation.\nplayer.showHtml(`\n    <html>\n        <head>\n            <style>\n                body {\n                    font: 400 16px system-ui;\n                    padding: 8px;\n                }\n\n                code {\n                    background-color: #eee;\n                }\n                li {\n                    margin-bottom: 8px;\n                }\n            </style>\n        </head>\n\n        <body>\n            <h3>Examples</h3>\n            <ul>\n            ${tags.chatCommands.map(c => \n                (`<li>Say <code>${c.examples[0][0].slice(1, -1)}</code> ${c.examples[0].slice(1)}</li>`)).join(``)}\n            </li>\n        </body>\n    </html>\n`);","onCreate":"@tags.builderState = null;\n","onStorySubscribed":"@if (!tags.builderColor) {\r\n    tags.builderColor = \"#3333CC\";\r\n}\r\nif (that.story === player.getCurrentStory() && tags.builderState === \"Enabled\") {\r\n    whisper(this, \"builderGetPlayerHelper\", { create: true });\r\n}","builderState":"Enabled","builderColor":"#3333CC","commandDownloadBuilder":"@const bots = getBots(\r\n    bySpace(\"shared\"),\r\n    byTag(\"#builderName\", tags.builderName),\r\n);\r\n\r\nconst badTags = [\r\n    'builderState',\r\n    'builderColor',\r\n    'auxBuilderX',\r\n    'auxBuilderY',\r\n    'auxBuilderSortOrder',\r\n];\r\nconst filtered = bots.map(b => {\r\n    const mod = { ...b.raw };\r\n    for (let tag of badTags) {\r\n        delete mod[tag];\r\n    }\r\n    return {\r\n        id: b.id,\r\n        tags: mod\r\n    };\r\n});\r\n\r\nplayer.downloadBots(filtered, `${tags.builderName}.aux`);","chatCommands":"=[\r\n    {\r\n        test: /^.$/gi,\r\n        shout: \"commandSummon\",\r\n        examples: [\r\n            [`\".\"`, `to summon Builder to this dimension`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.goto\\s([\\w\\s]+)?$/gi,\r\n        shout: \"commandGoto\",\r\n        examples: [\r\n            [`\".goto home\"`, `to go to the home dimension`],\r\n            [`\".goto auxBuilder\"`, `to go to the auxBuilder dimension`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.sheet(?:\\s([\\w\\s]+))?$/gi,\r\n        shout: \"commandShowSheet\",\r\n        examples: [\r\n            [`\".sheet\"`, `to open the sheet`],\r\n            [`\".sheet my-dimension\"`, `to open my-dimension in the sheet`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.show docs$/gi,\r\n        shout: \"commandShowDocs\",\r\n        examples: [\r\n            [`\".show docs\"`, `to open the documentation website`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.show history$/gi,\r\n        shout: \"commandShowHistory\",\r\n        examples: [\r\n            [`\".show history\"`, `to show version history`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.mark history$/gi,\r\n        shout: \"commandMarkHistory\",\r\n        examples: [\r\n            [`\".mark history\"`, `to create a new history mark`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.upload$/gi,\r\n        shout: \"commandUpload\",\r\n        examples: [\r\n            [`\".upload\"`, `to upload an AUX file`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.download$/gi,\r\n        shout: \"commandDownload\",\r\n        examples: [\r\n            [`\".download\"`, `to download the story`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.download builder$/gi,\r\n        shout: \"commandDownloadBuilder\",\r\n        examples: [\r\n            [`\".download builder\"`, `to download Builder`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.new bot$/gi,\r\n        shout: \"commandNewBot\",\r\n        examples: [\r\n            [`\".new bot\"`, `to create a bot inside Builder`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.new story ([\\s\\w-_]+)$/gi,\r\n        shout: \"commandNewStory\",\r\n        examples: [\r\n            [`\".new story my-story\"`, `to create a new story`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.sleep$/gi,\r\n        shout: \"commandSleep\",\r\n        examples: [\r\n            [`\".sleep\"`, `to put Builder to sleep`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.list commands$/gi,\r\n        shout: \"commandListCommands\",\r\n        examples: [\r\n            [`\".list commands\"`, `to list the available commands`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.help$/gi,\r\n        shout: \"commandListCommands\",\r\n        examples: [\r\n            [`\".help\"`, `to list available commands`]\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.clone builder\\s([\\s\\w-_]+)$/gi,\r\n        shout: \"commandNewBuilder\",\r\n        examples: [\r\n            [`\".clone builder b002\"`, `to clone Builder with a new name`]\r\n        ]\r\n    },\r\n]","commandGoToBuilder":"@player.goToDimension(\"auxBuilder\");","commandShowJoinCode":"@player.showJoinCode();","auxScaleZ":"0.01","builderStateEnabledOnEnter":"@player.toast(`(${tags.builderName}) hello`);\r\nwhisper(this, \"commandShowChat\");\r\nwhisper(this, \"builderGetPlayerHelper\", { create: true });\r\nshout(\"summonDimensionBuilder\");","commandRestoreMark":"@const b = that;\r\nif (b) {\r\n    server.restoreHistoryMark(b);\r\n}","commandShowChat":"@let example = [`Say`, `\"..\"`, `to wake ${tags.builderName}`];\r\nif (tags.builderState === \"Enabled\") {\r\n    const examples = [].concat.apply([], tags.chatCommands.map(c => c.examples).filter(e => e));\r\n    const index = math.randomInt(0, examples.length);\r\n    example = [`Try`, ...examples[index].slice(0, 1)];\r\n}\r\nplayer.showChat(`tip: ${example.join(' ')}`);","builderVersion":"29"}},"2b897334-d825-4ae0-81c4-fea1f48ddfcc":{"id":"2b897334-d825-4ae0-81c4-fea1f48ddfcc","tags":{"home":true,"homeSortOrder":0,"homeY":0,"homeX":-1,"onClick":"@tags.numCommits += 1;\r\nserver.markHistory({\r\n    message: 'Mark history #' + tags.numCommits\r\n});","auxLabel":"Create mark","numCommits":5,"auxLabelPosition":"floating"}},"882f7922-e122-4957-bb2d-67004b483432":{"id":"882f7922-e122-4957-bb2d-67004b483432","tags":{"auxListening":"false","auxBuilderLibrary":"dimensionTemplate","auxColor":"clear","creator":"208740b1-7a2a-4b41-9898-abed67039573","builderName":"ab-1","auxPositioningMode":"absolute","onDrop":"@whisper(this, \"builderCopyBot\", {\r\n    bot: that.dragBot\r\n});","auxScale":"=(tags.mod || tags.dropOver) ? 1.5 : 1;","builderCursorOnDrop":"@if (that.to.bot) {\r\n    shout(\"dimensionBuilderSelectBot\", that.to.bot.id);\r\n} else {\r\n    const dimension = that.to.dimension;\r\n    tags[dimension] = true;\r\n    tags[`${dimension}X`] = that.to.x;\r\n    tags[`${dimension}Y`] = that.to.y;\r\n}","builderColor":"#3333CC","auxLabel":"=tags.builderName","builderSetColor":"@tags.builderColor = that;","onDrag":"@if (tags.mod) {\r\n    const clone = create(tags.mod);\r\n    player.replaceDragBot(clone);\r\n} else {\r\n    let filters = [byTag(\"#auxBuilderLibrary\", \"dragTemplate\"), byTag(\"#builderName\", tags.builderName)];\r\n    const template = getBot(...filters);\r\n    player.replaceDragBot(create(template, {\r\n        space: \"tempLocal\",\r\n        auxListening: true,\r\n        auxEditable: false,\r\n        creator: bot.id,\r\n        builderColor: tags.builderColor,\r\n        builderName: tags.builderName,\r\n        auxLineTo: bot.id,\r\n    }));\r\n}","auxLabelColor":"=tags.builderColor","auxStrokeColor":"=tags.builderColor","dimensionBuilderSelectBot":"@tags.auxLineTo = that;","auxLineColor":"=tags.builderColor","auxLineStyle":"line","dimensionBuilderDeselectBot":"@tags.auxLineTo = null;","builderResetScale":"@tags.auxScale = null;\r\ntags.auxScaleX = null;\r\ntags.auxScaleY = null;\r\ntags.auxScaleZ = null;","onDropEnter":"@const builderName = getTag(that.dragBot, \"#builderName\");\nif (builderName) {\n    return;\n}\nwhisper(this, 'builderWrapBot', that.dragBot);\ntags.dropOver = true;","onDropExit":"@const builderName = getTag(that.dragBot, \"#builderName\");\nif (builderName) {\n    return;\n}\nwhisper(this, 'builderResetScale');\ntags.dropOver = false;","onClick":"@if (tags.mod) {\r\n    tags.mod = null;\r\n    destroy(tags.clonedBotId);\r\n    whisper(this, 'builderResetScale');\r\n} else {\r\n    shout(\"dimensionBuilderOnClick\");\r\n}","builderCopyBot":"@const dimension = player.getCurrentDimension();\nconst builderName = that.bot.id ? getTag(that.bot, \"#builderName\") : null;\nif (builderName) {\n    return;\n}\nconst mod = getMod(that.bot);\nconst clone = create(mod, {\n    space: \"tempLocal\",\n    creator: bot.id,\n    [dimension]: true,\n    [`${dimension}X`]: tags[`${dimension}X`],\n    [`${dimension}Y`]: tags[`${dimension}Y`],\n    [`${dimension}SortOrder`]: 0,\n});\ntags.clonedBotId = clone.id;\ntags.mod = mod;\nwhisper(this, 'builderWrapBot', that.bot);\ndestroy(that.bot);","builderWrapBot":"@const target = that.id ? getBot(\"#id\", that.id).tags : that;\r\ntags.auxScale = (target.auxScale || 1);\r\ntags.auxScaleX = (target.auxScaleX || 1) + 0.5;\r\ntags.auxScaleY = (target.auxScaleY || 1) + 0.5;\r\ntags.auxScaleZ = (target.auxScaleZ || 1) + 0.5;\r\n","moveDimensionBuilder":"@const { dimension, x, y } = that || {\r\n    dimension: player.getCurrentDimension(),\r\n    x: 0,\r\n    y: 0\r\n};\r\n\r\ntags[dimension] = true;\r\ntags[`${dimension}X`] = x;\r\ntags[`${dimension}Y`] = y;\r\n\r\nif (tags.mod) {\r\n    const clone = getBot(\"#id\", tags.clonedBotId);\r\n    clone.tags[dimension] = true;\r\n    clone.tags[`${dimension}X`] = x;\r\n    clone.tags[`${dimension}Y`] = y;\r\n}","onPaste":"@try {\r\n    const modOrBot = JSON.parse(that.text);\r\n    whisper(this, \"builderCopyBot\", { bot: modOrBot });\r\n} catch(err) {\r\n    // Couldn't parse JSON\r\n}\r\n"}},"916b27ef-4bfd-4ed9-a435-bf7c2616d434":{"id":"916b27ef-4bfd-4ed9-a435-bf7c2616d434","tags":{"auxDimensionConfig":"aux-users","auxDimensionVisualize":true}},"97d4e0d9-2131-4f84-b319-9f85a4ae3b16":{"id":"97d4e0d9-2131-4f84-b319-9f85a4ae3b16","tags":{"home":true,"homeSortOrder":0,"auxLabel":"Open restore story","homeY":-3,"homeX":-1,"onClick":"@player.openURL(\"https://auxplayer.com/?pagePortal=home&auxStory=restore-example\");","auxLabelPosition":"floating"}},"9d840c59-7ee3-433e-969b-12ca706e44b4":{"id":"9d840c59-7ee3-433e-969b-12ca706e44b4","tags":{"auxColor":"black","auxListening":"false","getCurrentMenu":"@return tags.currentMenuId ? tags.menuMap.find(m => m.menuId === tags.currentMenuId) : null;","dimensionMenuStateOpenOnEnter":"@shout(\"builderCommand\", { command: \"commandShowChat\" });","builderMenuStateOpenOnEnter":"@shout(\"builderCommand\", { command: \"commandShowChat\" });","menuMap":"=[\r\n    {\r\n        menuId: \"builder\",\r\n        filter: {\r\n            dimensionState: \"Builder\",\r\n            builderMenuState: \"Open\",\r\n        },\r\n        commands: tags.builderCommands\r\n    },\r\n    {\r\n        menuId: \"bot\",\r\n        filter: {\r\n            dimensionBuilderState: \"Summoned\",\r\n            dimensionMenuState: \"Open\",\r\n            dimensionSelectionState: \"Selected\"\r\n        },\r\n        commands: tags.botCommands\r\n    },\r\n    {\r\n        menuId: \"dimension\",\r\n        filter: {\r\n            dimensionBuilderState: \"Summoned\",\r\n            dimensionMenuState: \"Open\"\r\n        },\r\n        commands: tags.helperCommands\r\n    }\r\n]","auxBuilderLibrary":"playerTemplate","commandNewBot":"@const dimensionBot = getBot(\"id\", tags.dimensionBotId);;\r\nconst dimension = player.getCurrentDimension();\r\nconst x = dimensionBot.tags[`${dimension}X`];\r\nconst y = dimensionBot.tags[`${dimension}Y`];\r\n\r\nshout('builderCommand', { \r\n    command: \"commandNewBot\", \r\n    argument: {\r\n        dimension: dimension,\r\n        x: x,\r\n        y: y\r\n    } \r\n});","setup":"@whisper(this, \"onPlayerPortalChanged\", {\r\n    portal: \"pagePortal\",\r\n    dimension: player.getCurrentDimension()\r\n});","calculateMenu":"@const map = tags.menuMap;\r\nfor(let menu of map) {\r\n    const filter = menu.filter;\r\n    let matches = true;\r\n    for(let tag of Object.keys(filter)) {\r\n        let value = tags[tag];\r\n        let expected = filter[tag];\r\n        if (value !== expected) {\r\n            matches = false;\r\n            break;\r\n        }\r\n    }\r\n    if (matches) {\r\n        return menu;\r\n    }\r\n}\r\nreturn null;","onCreate":"@tags.auxEditable = false;\r\nwhisper(this, \"onPlayerPortalChanged\", {\r\n    portal: \"pagePortal\",\r\n    dimension: player.getCurrentDimension()\r\n});","commandAddHoverStateToBot":"@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    const [botId] = shout(\"builderCommand\", { command: \"commandAddHoverStateToBot\", argument: selected });\r\n}","commandMakeBotIntoButton":"@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    const [botId] = shout(\"builderCommand\", { command: \"commandMakeBotIntoButton\", argument: selected });\r\n}","createMenu":"@const commands = that;\r\nconst menuParent = create({ space: 'tempLocal' });\r\nconst pb = player.getBot();\r\nconst mods = commands.filter(c => { \r\n    return !!c.label && (!c.filter || c.filter());\r\n}).map(c => ({\r\n    space: 'tempLocal',\r\n    creator: menuParent.id,\r\n    auxLabel: c.label,\r\n    auxBuilderMenu: true,\r\n    menuShout: c.shout,\r\n    menuUpdate: c.update,\r\n    onClick: `@shout(\"builderMenuItemSelected\", { command: tags.menuShout, updateMenu: tags.menuUpdate })`,\r\n}));\r\n\r\ncreate(mods);\r\npb.tags.builderMenuId = menuParent.id;\r\npb.tags.menuPortal = \"auxBuilderMenu\";\r\npb.tags.auxMenuPortalConfigBot = menuParent.id;","destroyMenu":"@const pb = player.getBot();\r\nif (pb.tags.builderMenuId) {\r\n    destroy(pb.tags.builderMenuId);\r\n    tags.currentMenuId = null;\r\n}","updateMenu":"@const current = tags.currentMenuId;\r\nconst [finalMenu] = whisper(this, \"calculateMenu\");\r\nlet changed = false;\r\nif (!current && finalMenu) {\r\n    changed = true;\r\n} else if (current && !finalMenu) {\r\n    changed = true;\r\n} else if (!current && !finalMenu) {\r\n    changed = false;\r\n} else if (current !== finalMenu.menuId) {\r\n    changed = true;\r\n}\r\n\r\nif (changed) {\r\n    whisper(this, \"destroyMenu\");\r\n    tags.currentMenuId = finalMenu ? finalMenu.menuId : null;\r\n    const [menu] = whisper(this, \"getCurrentMenu\");\r\n    if (menu) {\r\n        whisper(this, \"createMenu\", menu.commands)\r\n    }\r\n}","creator":"208740b1-7a2a-4b41-9898-abed67039573","builderName":"ab-1","onAnyBotDrag":"@whisper(this, \"closeMenu\");","dimensionBuilderOnClick":"@if (tags.dimensionMenuState === \"Open\") {\r\n    changeState(this, \"Closed\", \"dimensionMenuState\");\r\n} else {\r\n    changeState(this, \"Open\", \"dimensionMenuState\");\r\n}\r\nwhisper(this, \"updateMenu\");","builderOnClick":"@if (tags.builderMenuState === \"Open\") {\r\n    changeState(this, \"Closed\", \"builderMenuState\");\r\n} else {\r\n    changeState(this, \"Open\", \"builderMenuState\");\r\n}\r\nwhisper(this, \"updateMenu\");","dimensionCommand":"@if (tags[that.command]) {\r\n    console.log(\"Use local command\");\r\n    whisper(this, that.command, that.argument);\r\n} else {\r\n    console.log(\"Use remote command\");\r\n    shout(\"builderCommand\", that);\r\n}","commandDeleteBot":"@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    shout('builderCommand', { command: \"commandDeleteBot\", argument: selected });\r\n}\r\n","builderMenuItemSelected":"@whisper(this, \"dimensionCommand\", { command: that.command });\r\nwhisper(this, \"closeMenu\");","onChat":"@whisper(this, \"closeMenu\");","dimensionBuilderSelectBot":"@const dragBot = getBot(\"#id\", that);\r\nconst builderName = getTag(dragBot, \"#builderName\");\r\nif (builderName) {\r\n    return;\r\n}\r\ntags.dimensionSelectedBotId = that;\r\nchangeState(this, \"Open\", \"dimensionMenuState\");\r\nchangeState(this, \"Selected\", \"dimensionSelectionState\");\r\nwhisper(this, \"updateMenu\");","onAnyBotClicked":"@const b = getBot(\"#id\", that.bot.id);\nif (b.tags.builderName !== tags.builderName) {\n    console.log(\"any click\");\n    whisper(this, \"closeMenu\");\n}","builderSetColor":"@tags.builderColor = that;","closeMenu":"@changeState(this, \"Closed\", \"builderMenuState\");\nchangeState(this, \"Closed\", \"dimensionMenuState\");\nshout(\"dimensionBuilderDeselectBot\");\nwhisper(this, \"updateMenu\");","commandCloneBot":"@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    const b = getBot(\"#id\", selected);\r\n    shout(\"builderCommand\", { command: \"commandNewBot\", argument: getMod(b) });\r\n}","dimensionStateEmptyOnEnter":"@console.log(\"enter empty\");\r\nwhisper(this, \"summonDimensionBuilder\");","destroyDimensionBuilder":"@if (tags.dimensionBotId) {\r\n    console.log(\"destroy\");\r\n    destroy(tags.dimensionBotId);\r\n}\r\nchangeState(this, \"Gone\", \"dimensionBuilderState\");","summonDimensionBuilder":"@whisper(this, \"destroyDimensionBuilder\");\r\nconsole.log(\"summon\");\r\nlet filters = [byTag(\"#auxBuilderLibrary\", \"dimensionTemplate\"), byTag(\"#builderName\", tags.builderName)];\r\nconst template = getBot(...filters);\r\nconst b = create(template, {\r\n    creator: bot.id,\r\n    space: \"tempLocal\",\r\n    auxListening: true,\r\n    [player.getCurrentDimension()]: true,\r\n    auxEditable: false,\r\n    builderColor: tags.builderColor,\r\n});\r\ntags.dimensionBotId = b.id;\r\n\r\nchangeState(this, \"Summoned\", \"dimensionBuilderState\");","dimensionStateEmptyOnExit":"@console.log(\"exit\");\r\nwhisper(this, \"destroyDimensionBuilder\");","onGridClick":"@whisper(this, \"closeMenu\");\r\nif (tags.dimensionBuilderState !== \"Summoned\") {\r\n    whisper(this, \"summonDimensionBuilder\");\r\n}\r\nshout(\"moveDimensionBuilder\", {\r\n    dimension: that.dimension,\r\n    x: that.position.x,\r\n    y: that.position.y\r\n});\r\n","commandRestoreMark":"@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    const b = getBot(\"#id\", selected);\r\n    shout(\"builderCommand\", { command: \"commandRestoreMark\", argument: b });\r\n}","dimensionBuilderDeselectBot":"@tags.dimensionSelectedBotId = null;\r\nchangeState(this, \"None\", \"dimensionSelectionState\");","onPlayerPortalChanged":"@let changed = false;\r\nif (that.portal === 'pagePortal' && that.dimension) {\r\n    console.log(\"Changed \" + that.portal + \" to \" + that.dimension);\r\n    if (that.dimension === 'auxBuilder') {\r\n        changeState(this, \"Builder\", \"dimensionState\");\r\n        changed = true;\r\n    } else {\r\n        // Main portal changed\r\n        const bots = getBots(inDimension(that.dimension), not(byTag(\"#builderName\"), tags.builderName));\r\n\r\n        if (bots.length === 0) {\r\n            changeState(this, \"Transition\", \"dimensionState\");\r\n            changeState(this, \"Empty\", \"dimensionState\");\r\n            changed = true;\r\n        } else {\r\n            changeState(this, \"Transition\", \"dimensionState\");\r\n            changeState(this, \"Filled\", \"dimensionState\");\r\n            changed = true;\r\n        }\r\n    }\r\n}\r\nif (changed) {\r\n    whisper(this, \"updateMenu\");\r\n}\r\nif (that.portal === 'sheetPortal' && that.dimension) {\r\n    whisper(this, \"destroyDimensionBuilder\");\r\n}\r\n","helperCommands":"=[\r\n    {\r\n        label: \"Open Sheet\",\r\n        shout: \"commandShowSheet\"\r\n    },\r\n    {\r\n        label: \"New Bot\",\r\n        shout: \"commandNewBot\"\r\n    },\r\n    {\r\n        label: \"Show Join Code\",\r\n        shout: \"commandShowJoinCode\"\r\n    },\r\n    {\r\n        label: \"Go to Builder Dimension\",\r\n        shout: \"commandGoToBuilder\"\r\n    },\r\n    {\r\n        label: \"Sleep\",\r\n        shout: \"commandSleep\"\r\n    }\r\n]","builderCommands":"=[\r\n    {\r\n        label: \"Sleep\",\r\n        shout: \"commandSleep\"\r\n    },\r\n    {\r\n        label: \"Download AUX\",\r\n        shout: \"commandDownload\"\r\n    },\r\n    {\r\n        label: \"Upload AUX\",\r\n        shout: \"commandUpload\"\r\n    },\r\n    {\r\n        label: \"Show History\",\r\n        shout: \"commandShowHistory\"\r\n    },\r\n    {\r\n        label: \"Mark History\",\r\n        shout: \"commandMarkHistory\"\r\n    },\r\n    {\r\n        label: \"Show Docs\",\r\n        shout: \"commandShowDocs\"\r\n    },\r\n    {\r\n        label: \"List Commands\",\r\n        shout: \"commandListCommands\"\r\n    },\r\n    {\r\n        label: \"Change Color\",\r\n        shout: \"commandChangeColor\"\r\n    }\r\n]","commandOpenBotInSheet":"@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    shout(\"builderCommand\", { command: \"commandShowSheet\", argument: [selected] });\r\n}","commandCopyBot":"@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    const b = getBot(\"#id\", selected);\r\n    const json = getJSON(getMod(b));\r\n    player.setClipboard(json);\r\n    player.toast(\"Copied!\");\r\n}","botCommands":"=[\r\n    {\r\n        label: \"Restore Mark\",\r\n        shout: \"commandRestoreMark\",\r\n        filter: () => {\r\n            const selected = tags.dimensionSelectedBotId ? getBot(\"#id\", tags.dimensionSelectedBotId) : null;\r\n            return selected && !!selected.tags.auxMarkHash;\r\n        }\r\n    },\r\n    {\r\n        label: \"Apply Button Mod\",\r\n        shout: \"commandMakeBotIntoButton\",\r\n        filter: () => {\r\n            const selected = tags.dimensionSelectedBotId ? getBot(\"#id\", tags.dimensionSelectedBotId) : null;\r\n            return selected && !selected.tags.onClick;\r\n        },\r\n        update: true,\r\n    },\r\n    {\r\n        label: \"Apply Hover Mod\",\r\n        shout: \"commandAddHoverStateToBot\",\r\n        filter: () => {\r\n            const selected = tags.dimensionSelectedBotId ? getBot(\"#id\", tags.dimensionSelectedBotId) : null;\r\n            return selected && !selected.tags.onPointerEnter;\r\n        },\r\n        update: true,\r\n    },\r\n    {\r\n        label: \"Open in Sheet\",\r\n        shout: \"commandOpenBotInSheet\",\r\n    },\r\n    {\r\n        label: \"Copy to Clipboard\",\r\n        shout: \"commandCopyBot\",\r\n    },\r\n    {\r\n        label: \"Clone\",\r\n        shout: \"commandCloneBot\",\r\n        update: true,\r\n    },\r\n    {\r\n        label: \"Delete Bot\",\r\n        shout: \"commandDeleteBot\",\r\n        update: true,\r\n    },\r\n]"}},"c1cf7e69-da7c-4cf0-b454-0139e5d48d95":{"id":"c1cf7e69-da7c-4cf0-b454-0139e5d48d95","tags":{"auxBuilderLibrary":"dragTemplate","onDrop":"@shout(\"builderCursorOnDrop\", that);\r\ndestroy(this);","auxListening":"false","creator":"208740b1-7a2a-4b41-9898-abed67039573","builderName":"ab-1","auxColor":"clear","onDropEnter":"@const builderName = getTag(that.to.bot, \"#builderName\");\nif (builderName) {\n    return;\n}\ntags.botDrop = true;","onDropExit":"@const builderName = getTag(that.to.bot, \"#builderName\");\nif (builderName) {\n    return;\n}\ntags.botDrop = false;","builderColor":"#3333CC","auxStrokeColor":"=tags.builderColor","auxLineStyle":"line","auxLineColor":"=tags.builderColor","auxScaleZ":"0.01"}},"cac60d0b-1941-4953-ad70-25482e003c23":{"id":"cac60d0b-1941-4953-ad70-25482e003c23","tags":{"auxHistory":true,"auxHistorySortOrder":0,"auxLabel":"Click any mark to restore it","auxLabelAnchor":"floating","auxHistoryX":-4,"auxHistoryY":-3}},"caffb3b1-de23-4e1d-bc15-9602629e8624":{"id":"caffb3b1-de23-4e1d-bc15-9602629e8624","tags":{"home":true,"homeY":0,"homeSortOrder":0,"auxLabel":"Load History","onClick":"@server.browseHistory();\r\nplayer.goToDimension('auxHistory');","homeX":-3,"onAnyBotClicked":"@const clickedBot = getBot(\"id\", that.bot.id);\r\nif (!clickedBot) {\r\n    player.toast('Bot not clicked ' + that.bot.id);\r\n    return;\r\n}\r\nif (clickedBot.tags.space === 'history') {\r\n    server.restoreHistoryMarkToStory(clickedBot, 'restore-example');\r\n    player.toast('Restored history to ' + clickedBot.tags.auxLabel);\r\n}","auxLabelPosition":"floating"}},"config":{"id":"config","tags":{"auxVersion":1,"auxDestroyable":false,"auxConnectedSessions":0}},"e7c19320-943b-4ce2-980c-8984f2bc6404":{"id":"e7c19320-943b-4ce2-980c-8984f2bc6404","tags":{"auxHistory":true,"auxLabel":"Back to home","auxLabelAnchor":"floating","onClick":"@player.goToDimension(\"home\");","auxHistorySortOrder":0,"auxHistoryY":-3,"auxHistoryX":-2}},"eb6b908d-6ffe-4648-b2a4-8d74ece36d6d":{"id":"eb6b908d-6ffe-4648-b2a4-8d74ece36d6d","tags":{"home":true,"homeSortOrder":0,"auxLabel":"Download","onClick":"@player.downloadStory();","homeY":-3,"homeX":-3,"auxLabelPosition":"floating"}},"f7e54e11-d405-4662-aa4e-54caac304512":{"id":"f7e54e11-d405-4662-aa4e-54caac304512","tags":{"home":true,"homeY":0,"homeSortOrder":0,"auxLabel":"Change color","homeX":1,"onClick":"@let randomColorMod = {auxColor:\"#\"+((1<<24)*Math.random()|0).toString(16)};\r\napplyMod(this, randomColorMod);","auxColor":"#4e7d2b","auxLabelPosition":"floating"}},"fd994fc6-6fa4-4735-9c05-4c35be65281d":{"id":"fd994fc6-6fa4-4735-9c05-4c35be65281d","tags":{"auxDimensionConfig":"aux-users","auxDimensionVisualize":true}},"server":{"id":"server","tags":{"aux-users":true,"_auxUser":"Server","_auxUserInventoryDimension":"_user_Server_inventory","_auxUserMenuDimension":"_user_Server_menu","_auxUserStoriesDimension":"_user_Server_stories","auxUserActive":false,"auxPlayerActive":false}}}}