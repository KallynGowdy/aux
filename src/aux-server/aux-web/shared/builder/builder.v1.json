{
    "208740b1-7a2a-4b41-9898-abed67039573": {
        "id": "208740b1-7a2a-4b41-9898-abed67039573",
        "tags": {
            "auxBuilder": true,
            "auxColor": "clear",
            "auxStrokeColor": "=tags.builderState === \"Enabled\" ? \"#33AA33\" : \"black\";",
            "builderSleep": "@changeState(this, \"Disabled\", \"builderState\");",
            "auxBuilderSortOrder": 0,
            "auxBuilderX": 0,
            "auxBuilderY": 1,
            "commandShowHistory": "@server.browseHistory();\r\nplayer.goToDimension(\"auxHistory\");",
            "commandSleep": "@whisper(this, \"builderSleep\");",
            "commandGoto": "@let [dimension] = that;\r\nif (!dimension) {\r\n    return;\r\n}\r\nplayer.goToDimension(dimension);",
            "commandDownload": "@player.downloadUniverse();",
            "commandUpload": "@player.showUploadAuxFile();",
            "commandShowDocs": "@player.openURL(\"https://docs.casualsimulation.com/docs/tags\");",
            "builderWake": "@changeState(this, \"Enabled\", \"builderState\");",
            "builderCommand": "@if (tags.builderState !== \"Enabled\") {\r\n    return;\r\n}\r\nwhisper(this, that.command, that.argument);",
            "commandNewBot": "@const {dimension, x, y} = that || { \r\n    dimension: player.getCurrentDimension(),\r\n    x: 0,\r\n    y: 0\r\n};\r\ncreate({\r\n    space: \"shared\",\r\n    auxCreator: null,\r\n    [dimension]: true,\r\n    [`${dimension}X`]: x,\r\n    [`${dimension}Y`]: y,\r\n});",
            "commandSummon": "@shout(\"summonDimensionBuilder\");",
            "commandDeleteBot": "@destroy(that);",
            "builderDebug": "@if (!tags.builderDebugging) {\r\n    return;\r\n}\r\nconsole.log(`[Builder] ${that}`);",
            "builderDebugging": "false",
            "builderStateEnabledOnExit": "@player.toast(\"ZZZZzzzz.....\");\r\nplayer.hideChat();\r\nlet [helper] = whisper(this, \"builderGetPlayerHelper\", { create: false });\r\nif (helper) {\r\n    destroy(helper);\r\n}",
            "onUniverseSubscribed": "@if (that.universe === player.getCurrentUniverse() && tags.builderState === \"Enabled\") {\r\n    whisper(this, \"builderGetPlayerHelper\", { create: true });\r\n}",
            "commandShowSheet": "@let [dimension] = that || [];\r\nplayer.getBot().tags.auxSheetPortal = dimension ? dimension : player.getCurrentDimension();",
            "commandCloneBot": "@const b = getBot(\"#id\", that);\r\nconst created = create(b, { auxCreator: b.tags.auxCreator });\r\nreturn created.id;",
            "commandMakeBotIntoButton": "@const b = getBot(\"#id\", that);\r\nb.tags.onClick = `@player.toast(\"You clicked me!\");`;",
            "commandAddHoverStateToBot": "@const b = getBot(\"#id\", that);\r\nb.tags.onPointerEnter = `@\r\ntags.oldColor = raw.auxColor;\r\ntags.oldScale = raw.auxScale;\r\ntags.auxColor = \"green\";\r\ntags.auxScale = 1.1;\r\n`;\r\nb.tags.onPointerExit = `@\r\ntags.auxColor = raw.oldColor;\r\ntags.auxScale = raw.oldScale;\r\ntags.oldColor = null;\r\ntags.oldScale = null;\r\n`;",
            "commandMarkHistory": "@const day = new Date();\r\nserver.markHistory({\r\n    message: `Save on ${day.getFullYear()}/${day.getMonth()}/${day.getDate()}`\r\n});",
            "commandNewUniverse": "@let [universe] = that || [];\r\nif (universe) {\r\n    server.setupUniverse(universe);\r\n    const dimension = player.getCurrentDimension() || player.getBot().tags.auxSheetPortal;\r\n    player.openURL(`/?auxUniverse=${encodeURIComponent(universe)}&auxPagePortal=${encodeURIComponent(dimension)}`);\r\n}",
            "builderVersion": "8",
            "builderName": "b001",
            "builderGetPlayerHelper": "@let filters = [byTag(\"#auxBuilderLibrary\", \"playerTemplate\"), byTag(\"#builderName\", tags.builderName)];\r\nlet helper = getBot(...filters, bySpace(\"tempLocal\"));\r\nif (!helper && that.create) {\r\n    const prefab = getBot(...filters);\r\n    helper = create(prefab, { \r\n        space: \"tempLocal\",\r\n        auxListening: true,\r\n        auxBuilderId: bot.id,\r\n    });\r\n}\r\n\r\nreturn helper;",
            "onChat": "@const wakeRegex = /^\\.\\.\\s?([\\s\\w-_]+)?$/gi;\r\nconst wakeResult = wakeRegex.exec(that.message);\r\nif (wakeResult) {\r\n    const [_, builderName] = wakeResult;\r\n    if (builderName === tags.builderName || (!builderName && tags.builderName === \"b001\")) {\r\n        whisper(this, \"builderWake\");\r\n    } else {\r\n        whisper(this, \"builderSleep\");\r\n    }\r\n}\r\nconst commands = tags.chatCommands;\r\nfor(let command of commands) {\r\n    if (command.test) {\r\n        const result = command.test.exec(that.message);\r\n        if (!result) {\r\n            continue;\r\n        }\r\n        if (tags.builderState !== \"Enabled\") {\r\n            player.toast(\"Builder is sleeping\");\r\n        } else {\r\n            shout(\"builderCommand\", { command: command.shout, argument: result.slice(1) });\r\n        }\r\n        break;\r\n    }\r\n}\r\n",
            "chatCommands": "=[\r\n    {\r\n        test: /^\\.sleep$/gi,\r\n        shout: \"commandSleep\",\r\n        examples: [\r\n            \".sleep\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.download$/gi,\r\n        shout: \"commandDownload\",\r\n        examples: [\r\n            \".download\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.download builder$/gi,\r\n        shout: \"commandDownloadBuilder\",\r\n        examples: [\r\n            \".download builder\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.upload$/gi,\r\n        shout: \"commandUpload\",\r\n        examples: [\r\n            \".upload\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.show history$/gi,\r\n        shout: \"commandShowHistory\",\r\n        examples: [\r\n            \".show history\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.mark history$/gi,\r\n        shout: \"commandMarkHistory\",\r\n        examples: [\r\n            \".mark history\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.new universe ([\\s\\w-_]+)$/gi,\r\n        shout: \"commandNewUniverse\",\r\n        examples: [\r\n            \".new universe my-universe\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.show docs$/gi,\r\n        shout: \"commandShowDocs\",\r\n        examples: [\r\n            \".show docs\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.sheet(?:\\s([\\w\\s]+))?$/gi,\r\n        shout: \"commandShowSheet\",\r\n        examples: [\r\n            \".sheet\",\r\n            \".sheet my-dimension\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.goto\\s([\\w\\s]+)?$/gi,\r\n        shout: \"commandGoto\",\r\n        examples: [\r\n            \".goto my-dimension\",\r\n            \".goto auxBuilder\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.show docs$/gi,\r\n        shout: \"commandShowDocs\",\r\n        examples: [\r\n            \".show docs\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^.summon$/gi,\r\n        shout: \"commandSummon\",\r\n        examples: [\r\n            \".summon\"\r\n        ]\r\n    },\r\n    {\r\n        test: /^\\.new builder\\s([\\s\\w-_]+)$/gi,\r\n        shout: \"commandNewBuilder\",\r\n        examples: [\r\n            \".new builder b002\"\r\n        ]\r\n    }\r\n]",
            "onTapCode": "@if (tags.builderName !== \"b001\") {\r\n    return;\r\n}\r\nif (that === \"3342\") {\r\n    whisper(this, \"commandShowChat\");\r\n} else if(that.endsWith(\"5\")) {\r\n    player.hideChat();\r\n}",
            "onKeyUp": "@if (tags.builderName !== \"b001\") {\r\n    return;\r\n}\r\nif (that.keys.indexOf(\"`\") >= 0) {\r\n    whisper(this, \"commandShowChat\");\r\n}",
            "commandShowChat": "@let example = `..`;\r\nif (tags.builderState === \"Enabled\") {\r\n    const examples = [].concat.apply([], tags.chatCommands.map(c => c.examples).filter(e => e));\r\n    const index = math.randomInt(0, examples.length);\r\n    example = examples[index];\r\n}\r\nplayer.showChat(`Say \"${example}\"`);",
            "builderStateEnabledOnEnter": "@player.toast(\"hello\");\r\nwhisper(this, \"commandShowChat\");\r\nwhisper(this, \"builderGetPlayerHelper\", { create: true });",
            "onClick": "@if (tags.builderState !== \"Enabled\") {\r\n    const builderName = tags.builderName;\r\n    const otherBuilders = getBots(byTag(\"#builderName\", v => v !== builderName));\r\n    whisper(otherBuilders, \"builderSleep\");\r\n    whisper(this, \"builderWake\");\r\n} else {\r\n    whisper(this, \"builderGetPlayerHelper\", { create: true });\r\n    shout(\"builderOnClick\");\r\n}",
            "commandDownloadBuilder": "@const bots = getBots(\r\n    bySpace(\"shared\"),\r\n    byTag(\"#builderName\", tags.builderName),\r\n);\r\n\r\nplayer.downloadBots(bots, \"builder.aux\");",
            "commandNewBuilder": "@let [name] = that || [];\r\nif (name) {\r\n    const existing = getBots(byTag(\"#builderName\", name), bySpace(\"shared\"));\r\n    if (existing.length > 0) {\r\n        player.toast(\"That builder name already exists\");\r\n        return;\r\n    }\r\n    const bots = getBots(byTag(\"#builderName\", tags.builderName), bySpace(\"shared\"));\r\n    create(bots, {\r\n        builderName: name\r\n    });\r\n}",
            "onCreate": "@tags.builderState = null;"
        }
    },
    "882f7922-e122-4957-bb2d-67004b483432": {
        "id": "882f7922-e122-4957-bb2d-67004b483432",
        "tags": {
            "auxListening": "false",
            "auxBuilderLibrary": "dimensionTemplate",
            "auxColor": "clear",
            "auxStrokeColor": "#3333CC",
            "builderCursorOnDrop": "@if (that.to.bot) {\r\n    shout(\"dimensionBuilderSelectBot\", that.to.bot.id);\r\n} else {\r\n    const dimension = that.to.dimension;\r\n    tags[dimension] = true;\r\n    tags[`${dimension}X`] = that.to.x;\r\n    tags[`${dimension}Y`] = that.to.y;\r\n}",
            "onDropExit": "@whisper(this, \"resetColor\");",
            "onDropEnter": "@whisper(this, \"cloneColor\", that.dragBot.id);",
            "onDrop": "@whisper(this, \"cloneColor\", that.dragBot.id);\r\ntags.mod = getMod(that.dragBot);",
            "onClick": "@if (tags.mod) {\r\n    whisper(this, \"resetColor\");\r\n    tags.mod = null;\r\n} else {\r\n    shout(\"dimensionBuilderOnClick\");\r\n}",
            "resetColor": "@tags.auxColor = \"clear\";\r\ntags.auxStrokeColor = \"#3333CC\";",
            "cloneColor": "@const dragBot = getBot(\"#id\", that);\r\ntags.auxColor = dragBot.raw.auxColor;\r\ntags.auxStrokeColor = \"#33AA33\";",
            "builderName": "b001",
            "onDrag": "@if (tags.mod) {\r\n    const clone = create(tags.mod);\r\n    console.log(tags.mod);\r\n    player.replaceDragBot(clone);\r\n} else {\r\n    let filters = [byTag(\"#auxBuilderLibrary\", \"dragTemplate\"), byTag(\"#builderName\", tags.builderName)];\r\n    const template = getBot(...filters);\r\n    player.replaceDragBot(create(template, {\r\n        space: \"tempLocal\",\r\n        auxListening: true,\r\n        auxEditable: false,\r\n    }));\r\n}"
        }
    },
    "9d840c59-7ee3-433e-969b-12ca706e44b4": {
        "id": "9d840c59-7ee3-433e-969b-12ca706e44b4",
        "tags": {
            "auxColor": "black",
            "auxListening": "false",
            "getCurrentMenu": "@return tags.currentMenuId ? tags.menuMap.find(m => m.menuId === tags.currentMenuId) : null;",
            "dimensionBuilderOnClick": "@changeState(this, \"Open\", \"dimensionMenuState\");\r\nwhisper(this, \"updateMenu\");",
            "builderOnClick": "@changeState(this, \"Open\", \"builderMenuState\");\r\nwhisper(this, \"updateMenu\");",
            "onGridClick": "@changeState(this, \"Closed\", \"builderMenuState\");\r\nchangeState(this, \"Closed\", \"dimensionMenuState\");\r\nchangeState(this, \"None\", \"dimensionSelectionState\");\r\nwhisper(this, \"updateMenu\");",
            "dimensionMenuStateOpenOnEnter": "@shout(\"commandShowChat\");",
            "builderMenuStateOpenOnEnter": "@shout(\"commandShowChat\");",
            "builderCommands": "=[\r\n    {\r\n        label: \"Sleep\",\r\n        shout: \"commandSleep\"\r\n    },\r\n    {\r\n        label: \"Download\",\r\n        shout: \"commandDownload\"\r\n    },\r\n    {\r\n        label: \"Upload\",\r\n        shout: \"commandUpload\"\r\n    },\r\n    {\r\n        label: \"Show History\",\r\n        shout: \"commandShowHistory\"\r\n    },\r\n    {\r\n        label: \"Mark History\",\r\n        shout: \"commandMarkHistory\"\r\n    },\r\n    {\r\n        label: \"New Universe\",\r\n        shout: \"commandNewUniverse\"\r\n    },\r\n    {\r\n        label: \"Show Docs\",\r\n        shout: \"commandShowDocs\"\r\n    },\r\n]",
            "helperCommands": "=[\r\n    {\r\n        label: \"Open Sheet\",\r\n        shout: \"commandShowSheet\"\r\n    },\r\n    {\r\n        label: \"New Bot\",\r\n        shout: \"commandNewBot\"\r\n    }\r\n]",
            "dimensionStateEmptyOnEnter": "@whisper(this, \"summonDimensionBuilder\");",
            "menuMap": "=[\r\n    {\r\n        menuId: \"builder\",\r\n        filter: {\r\n            dimensionState: \"Builder\",\r\n            builderMenuState: \"Open\",\r\n        },\r\n        commands: tags.builderCommands\r\n    },\r\n    {\r\n        menuId: \"bot\",\r\n        filter: {\r\n            dimensionBuilderState: \"Summoned\",\r\n            dimensionMenuState: \"Open\",\r\n            dimensionSelectionState: \"Selected\"\r\n        },\r\n        commands: tags.botCommands\r\n    },\r\n    {\r\n        menuId: \"dimension\",\r\n        filter: {\r\n            dimensionBuilderState: \"Summoned\",\r\n            dimensionMenuState: \"Open\"\r\n        },\r\n        commands: tags.helperCommands\r\n    }\r\n]",
            "auxBuilderLibrary": "playerTemplate",
            "dimensionBuilderSelectBot": "@tags.dimensionSelectedBotId = that;\r\nchangeState(this, \"Open\", \"dimensionMenuState\");\r\nchangeState(this, \"Selected\", \"dimensionSelectionState\");\r\nwhisper(this, \"updateMenu\");",
            "dimensionCommand": "@if (tags[that.command]) {\r\n    console.log(\"Use local command\");\r\n    whisper(this, that.command, that.argument);\r\n} else {\r\n    console.log(\"Use remote command\");\r\n    shout(\"builderCommand\", that);\r\n}",
            "commandDeleteBot": "@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    shout('builderCommand', { command: \"commandDeleteBot\", argument: selected });\r\n}\r\nchangeState(this, \"Closed\", \"dimensionMenuState\");\r\nchangeState(this, \"None\", \"dimensionSelectionState\");\r\nwhisper(this, \"updateMenu\");\r\n",
            "commandNewBot": "@const dimensionBot = getBot(\"id\", tags.dimensionBotId);;\r\nconst dimension = player.getCurrentDimension();\r\nconst x = dimensionBot.tags[`${dimension}X`];\r\nconst y = dimensionBot.tags[`${dimension}Y`];\r\n\r\nshout('builderCommand', { \r\n    command: \"commandNewBot\", \r\n    argument: {\r\n        dimension: dimension,\r\n        x: x,\r\n        y: y\r\n    } \r\n});",
            "setup": "@whisper(this, \"onPlayerPortalChanged\", {\r\n    portal: \"auxPagePortal\",\r\n    dimension: player.getCurrentDimension()\r\n});",
            "onPlayerPortalChanged": "@let changed = false;\r\nif (that.portal === 'auxPagePortal' && that.dimension) {\r\n    if (that.dimension === 'auxBuilder') {\r\n        changeState(this, \"Builder\", \"dimensionState\");\r\n        changed = true;\r\n    } else {\r\n        // Main portal changed\r\n        const bots = getBots(inDimension(that.dimension));\r\n\r\n        if (bots.length === 0) {\r\n            changeState(this, \"Transition\", \"dimensionState\");\r\n            changeState(this, \"Empty\", \"dimensionState\");\r\n            changed = true;\r\n        } else {\r\n            changeState(this, \"Transition\", \"dimensionState\");\r\n            changeState(this, \"Filled\", \"dimensionState\");\r\n            changed = true;\r\n        }\r\n    }\r\n}\r\nif (changed) {\r\n    whisper(this, \"updateMenu\");\r\n}",
            "calculateMenu": "@const map = tags.menuMap;\r\nfor(let menu of map) {\r\n    const filter = menu.filter;\r\n    let matches = true;\r\n    for(let tag of Object.keys(filter)) {\r\n        let value = tags[tag];\r\n        let expected = filter[tag];\r\n        if (value !== expected) {\r\n            matches = false;\r\n            break;\r\n        }\r\n    }\r\n    if (matches) {\r\n        return menu;\r\n    }\r\n}\r\nreturn null;",
            "destroyDimensionBuilder": "@if (tags.dimensionBotId) {\r\n    destroy(tags.dimensionBotId);\r\n}\r\nchangeState(this, \"Gone\", \"dimensionBuilderState\");",
            "onCreate": "@tags.auxEditable = false;\r\nwhisper(this, \"onPlayerPortalChanged\", {\r\n    portal: \"auxPagePortal\",\r\n    dimension: player.getCurrentDimension()\r\n});",
            "commandCloneBot": "@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    const [botId] = shout(\"builderCommand\", { command: \"commandCloneBot\", argument: selected });\r\n    if (botId) {\r\n        shout(\"dimensionBuilderSelectBot\", botId);\r\n    }\r\n}",
            "commandAddHoverStateToBot": "@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    const [botId] = shout(\"builderCommand\", { command: \"commandAddHoverStateToBot\", argument: selected });\r\n}",
            "commandMakeBotIntoButton": "@const selected = tags.dimensionSelectedBotId;\r\nif (selected) {\r\n    const [botId] = shout(\"builderCommand\", { command: \"commandMakeBotIntoButton\", argument: selected });\r\n}",
            "botCommands": "=[\r\n    {\r\n        label: \"Make Bot Into Button\",\r\n        shout: \"commandMakeBotIntoButton\",\r\n        filter: () => {\r\n            const selected = tags.dimensionSelectedBotId ? getBot(\"#id\", tags.dimensionSelectedBotId) : null;\r\n            return selected && !selected.tags.onClick;\r\n        },\r\n        update: true,\r\n    },\r\n    {\r\n        label: \"Add Hover State\",\r\n        shout: \"commandAddHoverStateToBot\",\r\n        filter: () => {\r\n            const selected = tags.dimensionSelectedBotId ? getBot(\"#id\", tags.dimensionSelectedBotId) : null;\r\n            return selected && !selected.tags.onPointerEnter;\r\n        },\r\n        update: true,\r\n    },\r\n    {\r\n        label: \"Make Clone\",\r\n        shout: \"commandCloneBot\",\r\n        update: true,\r\n    },\r\n    {\r\n        label: \"Delete Bot\",\r\n        shout: \"commandDeleteBot\",\r\n        update: true,\r\n    },\r\n]",
            "createMenu": "@const commands = that;\r\nconst menuParent = create({ space: 'tempLocal' });\r\nconst pb = player.getBot();\r\nconst mods = commands.filter(c => { \r\n    return !!c.label && (!c.filter || c.filter());\r\n}).map(c => ({\r\n    space: 'tempLocal',\r\n    auxCreator: menuParent.id,\r\n    auxLabel: c.label,\r\n    auxBuilderMenu: true,\r\n    menuShout: c.shout,\r\n    menuUpdate: c.update,\r\n    onClick: `@shout(\"builderMenuItemSelected\", { command: tags.menuShout, updateMenu: tags.menuUpdate })`,\r\n}));\r\n\r\ncreate(mods);\r\npb.tags.builderMenuId = menuParent.id;\r\npb.tags.auxMenuPortal = \"auxBuilderMenu\";\r\npb.tags.auxMenuPortalConfigBot = menuParent.id;",
            "builderMenuItemSelected": "@whisper(this, \"dimensionCommand\", { command: that.command });\r\nif (that.updateMenu) {\r\n    whisper(this, \"destroyMenu\");\r\n    whisper(this, \"updateMenu\");\r\n}",
            "destroyMenu": "@const pb = player.getBot();\r\nif (pb.tags.builderMenuId) {\r\n    destroy(pb.tags.builderMenuId);\r\n    tags.currentMenuId = null;\r\n}",
            "updateMenu": "@const current = tags.currentMenuId;\r\nconst [finalMenu] = whisper(this, \"calculateMenu\");\r\nlet changed = false;\r\nif (!current && finalMenu) {\r\n    changed = true;\r\n} else if (current && !finalMenu) {\r\n    changed = true;\r\n} else if (!current && !finalMenu) {\r\n    changed = false;\r\n} else if (current !== finalMenu.menuId) {\r\n    changed = true;\r\n}\r\n\r\nif (changed) {\r\n    whisper(this, \"destroyMenu\");\r\n    tags.currentMenuId = finalMenu ? finalMenu.menuId : null;\r\n    const [menu] = whisper(this, \"getCurrentMenu\");\r\n    if (menu) {\r\n        whisper(this, \"createMenu\", menu.commands)\r\n    }\r\n}",
            "builderName": "b001",
            "summonDimensionBuilder": "@whisper(this, \"destroyDimensionBuilder\");\r\nlet filters = [byTag(\"#auxBuilderLibrary\", \"dimensionTemplate\"), byTag(\"#builderName\", tags.builderName)];\r\nconst template = getBot(...filters);\r\nconst b = create(template, {\r\n    space: \"tempLocal\",\r\n    auxListening: true,\r\n    [player.getCurrentDimension()]: true,\r\n    auxEditable: false,\r\n});\r\ntags.dimensionBotId = b.id;\r\n\r\nchangeState(this, \"Summoned\", \"dimensionBuilderState\");"
        }
    },
    "c1cf7e69-da7c-4cf0-b454-0139e5d48d95": {
        "id": "c1cf7e69-da7c-4cf0-b454-0139e5d48d95",
        "tags": {
            "auxBuilderLibrary": "dragTemplate",
            "auxColor": "=tags.botDrop ? \"#00AA00\" : \"#993333\";",
            "auxScaleZ": "0.1",
            "onDropEnter": "@tags.botDrop = true;",
            "onDropExit": "@tags.botDrop = false;",
            "onDrop": "@shout(\"builderCursorOnDrop\", that);\r\ndestroy(this);",
            "auxListening": "false",
            "builderName": "b001"
        }
    }
}
