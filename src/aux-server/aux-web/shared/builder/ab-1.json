{
    "version": 27,
    "internalVersion": 1,
    "data": [
        {
            "id": "13514b04-46ab-4cca-9d59-12d3f6481ddf",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-skill": "AR Setup Button",
                "ab-autoWeight": 0,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "scaleZ": 0.5,
                "ab-skillAction": "@//sets up making a vr button\nlet o = {};\no.space = \"tempLocal\";\no.onClick = `@ player.enableAR();`;\no.label = \"Enable AR\";\no.scaleX = 2;\no.scaleY = 1;\no.scaleZ = 0.61;\n\nshout(\"ab-createSkill\", o);",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-1Y": -2,
                "ab-1X": -15,
                "ab-state": "Inactive",
                "color": "lightgray",
                "ab-updateID": "49ae938a-dc2f-4c5f-96f7-dca41433d74e",
                "labelPosition": "top"
            }
        },
        {
            "id": "160e3b95-222b-442d-8736-2cb7b4a264b5",
            "space": "shared",
            "tags": {
                "creator": "9f6f8d09-e67a-4245-87e7-180775fcf5fc",
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-state": "Active",
                "ab-updateID": "50cb4b05-1633-43e2-837a-d3c58a42cb6c",
                "ab-upadteID": "109b4fcf-349e-49ee-8328-f4401c27be78",
                "ab-1X": 5,
                "ab-1Y": 6,
                "ab-manualWeight": 3,
                "color": "#e6668d",
                "labelPosition": "top",
                "ab-skillAction": "@//takes player to current dimensions build sheet\nlet b = getBot(\"ab-id\", \"multiSelect\")\n\nif (b == null){\n    create({\n        space: \"local\",\n        \"ab-id\": \"multiSelect\",\n        \"onStoryStreaming\": \"@setTag(getBot(getID(this)), getID(this), null);\"\n    })\n}\n\nplayer.openURL(\"https://auxplayer.com/?story=\"+player.getCurrentStory()+\"&sheetPortal=\"+b.id);",
                "ab-skill": "Open Multi-Select Sheet",
                "ab-autoWeight": 0,
                "totalWeight": 3,
                "scaleZ": 1.5,
                "lineTo": "= getBot('id', 'e285ecbb-77ab-4289-ae20-2701d676c714');"
            }
        },
        {
            "id": "1bbfb6c1-7647-4767-962c-2fae400232d0",
            "space": "shared",
            "tags": {
                "ab-1": true,
                "ab-weight": "0",
                "lineStyle": "line",
                "labelSize": 2,
                "ab-skill": "Download Story",
                "ab-1SortOrder": 0,
                "positioningMode": "absolute",
                "ab-target": "none",
                "destroyable": "false",
                "scale": 1,
                "strokeColor": "#F28705",
                "scaleX": "0.9",
                "scaleY": "0.9",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-skillAction": "@//downloads entire universe/story\nplayer.downloadStory();",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-state": "Active",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-autoWeight": 0,
                "ab-updateID": "c856e31a-2c13-458b-8396-a72788f8e620",
                "ab-1Y": 0,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "scaleZ": 0.5,
                "color": "#e6666c",
                "lineTo": "= getBot('id', 'a40548f7-b55f-4f1a-95af-2ec1f40c91fd');",
                "ab-1X": -2,
                "labelPosition": "top"
            }
        },
        {
            "id": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
            "space": "shared",
            "tags": {
                "ab-1X": 0,
                "ab-1Y": 0,
                "ab-1SortOrder": 1,
                "ab-id": "skillConfig",
                "ab-1": "here",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "ab-heatMap": "[]",
                "listening": "false",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "ab-1Setup": "here",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "ab-updateID": "f1423ed3-e5d9-47b2-b5ac-73163fc1e127",
                "destroyable": "false"
            }
        },
        {
            "id": "2495bffd-59f6-4910-9543-65275317f1ef",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-autoWeight": 0,
                "ab-skill": "AR Exit Button",
                "scaleZ": 0.5,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "ab-skillAction": "@//sets up making a vr button\nlet o = {};\no.space = \"tempLocal\";\no.onClick = `@ player.disableAR();`;\no.label = \"Exit AR\";\no.scaleX = 2;\no.scaleY = 1;\no.scaleZ = 0.61;\n\nshout(\"ab-createSkill\", o);",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-1X": -11,
                "ab-1Y": -2,
                "ab-state": "Inactive",
                "color": "lightgray",
                "ab-updateID": "67608d72-5d30-4d0a-b326-6952c19d1a3d",
                "labelPosition": "top"
            }
        },
        {
            "id": "315e773b-f9f5-4b0a-aee2-14c41a129228",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-state": "Active",
                "portalID": "ac1367f2-d6b3-4f5d-a649-ac9ee06df644",
                "anchorPoint": "bottom",
                "meetPortalAnchorPoint": "bottomLeft",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "anchorSetup": "@let possibilities = [\n    {\n        label: \"Full Screen\",\n        value: \"fullscreen\"\n    },\n    {\n        label: \"Top\",\n        value: \"top\"\n    },\n    {\n        label: \"Top Left\",\n        value: \"topLeft\"\n    },\n    {\n        label: \"Top Right\",\n        value: \"topRight\"\n    },\n    {\n        label: \"Bottom\",\n        value: \"bottom\"\n    },\n    {\n        label: \"Bottom Left\",\n        value: \"bottomLeft\"\n    },\n    {\n        label: \"Bottom Right\",\n        value: \"bottomRight\"\n    },\n    {\n        label: \"Left\",\n        value: \"left\"\n    },\n    {\n        label: \"Right\",\n        value: \"right\"\n    }];\n\nfor (let i = 0; i < possibilities.length; i++) {\n    create(null, {\n        space: \"tempLocal\",\n        \"menu\": true,\n        \"label\": possibilities[i].label,\n        \"value\": possibilities[i].value,\n        \"onClick\": \"@setTag(getBot('id', tags['ab-target']), 'meetPortalAnchorPoint', tags.value); shout('anchorMenu')\",\n        \"anchorMenu\": \"@destroy(this);\",\n        \"ab-skillAction\": \"@destroy(this);\",\n        \"onGridClick\": \"@destroy(this);\",\n        \"ab-target\": getID(this),\n    })\n}",
                "ab-skillAction": "@if (tags.portalID == null) {\n    tags.portalID = uuid();\n}\nif (tags[\"ab-skill\"] == \"Join Collaborator Call\") {\n    let b = getBot(\"ab-skill\", \"Change Meet Anchor\");\n\n    if (b == null) {\n\n        let c = create(this, {\n            space: \"local\",\n            \"meetPortalAnchorPoint\": \"bottomLeft\",\n            \"ab-skill\": \"Change Meet Anchor\",\n            \"ab-skillAction\": tags.anchorSetup\n        })\n\n        player.getBot().tags.meetPortalConfigBot = c.id;\n\n    } else {\n\n        player.getBot().tags.meetPortalConfigBot = b.id;\n    }\n    \n\n    player.getBot().tags.meetPortal = player.getCurrentStory() + tags.portalID;\n}\nelse {\n    player.getBot().tags.meetPortal = null;\n    player.getBot().tags.meetPortalConfigBot = null;\n}",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-skill": "=if (player.getBot().tags.meetPortal == null) {\n    \"Join Collab Call\"\n} else {\n    \"Leave Collab Call\"\n}",
                "ab-updateID": "4532794c-5300-4b51-8885-0395b2f51949",
                "ab-autoWeight": 0,
                "ab-1Y": 17,
                "ab-manualWeight": 9,
                "totalWeight": 9,
                "scaleZ": 4.5,
                "color": "#e666d5",
                "lineTo": "= getBot('id', '315e773b-f9f5-4b0a-aee2-14c41a129228');",
                "ab-1X": 1,
                "labelPosition": "top"
            }
        },
        {
            "id": "390b2e0d-2dea-446d-b0e5-82f77065a697",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "lineStyle": "line",
                "ab-1X": -6,
                "ab-1Y": -5,
                "ab-1Reset": "@destroy(this);",
                "ab-1": "here",
                "ab-id": "ab1Template",
                "scaleX": "1",
                "scaleY": "1",
                "scaleZ": "1",
                "ab-menuState": "Closed",
                "strokeColor": "#FF9400",
                "lineColor": "#FF9400",
                "labelColor": "#FF9400",
                "ab-skillState": "Builder",
                "onAnyBotClicked": "@//logic to close menu on other clicks\nif (tags[\"ab-menuState\"] == \"Open\" && that.bot.id != getID(this) && that.bot.tags[\"ab-id\"] != \"*\"){\n    changeState(this, \"Closed\", \"ab-menuState\");\n}",
                "ab-gridClick": "@//shuts down the menu\nif(tags[\"ab-menuState\"] == \"Open\" || tags[\"ab-menuState\"] == null){\n    changeState(this, \"Closed\", \"ab-menuState\");\n}",
                "labelSize": "1.5",
                "onAnyBotDrag": "@//logic to close menu on other bots dragged\nif(tags[\"ab-menuState\"] == \"Open\"){\n    changeState(this, \"Closed\", \"ab-menuState\");\n}\n\n//need to build logic to kill arm if that is not what's being dragged",
                "listening": "false",
                "ab-1Setup": "here",
                "ab-cloneSkill": "@let currentDim = player.getCurrentDimension()\nlet newBot = create(null, that);\n\n//setting up the representation bot inside of the ab-1\nnewBot.tags[currentDim] = true;\nnewBot.tags[currentDim+\"X\"] = tags[currentDim+\"X\"];\nnewBot.tags[currentDim+\"Y\"] = tags[currentDim+\"Y\"];\nnewBot.tags[\"ab-id\"] = \"newTemplate\";\nnewBot.tags.positioningMode = \"absolute\";\n\n//logic setup for the actual cloning of the bot\nchangeState(this, \"NewClone\", \"ab-skillState\");",
                "ab-createSkill": "@let currentDim = player.getCurrentDimension()\nlet newBot = create(null, that);\n\n//setting up the representation bot inside of the ab-1\nnewBot.tags[currentDim] = true;\nnewBot.tags[currentDim+\"X\"] = tags[currentDim+\"X\"];\nnewBot.tags[currentDim+\"Y\"] = tags[currentDim+\"Y\"];\nnewBot.tags[\"ab-id\"] = \"newTemplate\";\nnewBot.tags.positioningMode = \"absolute\";\n\n//logic setup for the actual creation of a blank bot\nchangeState(this, \"NewEmpty\", \"ab-skillState\");",
                "ab-skillStateNewEmptyOnEnter": "@var newBot = getBot(\"ab-id\", \"newTemplate\");\n\n//expands to take in the new represenation bot\ntags.scaleX = newBot.tags.scaleX+0.25;\ntags.scaleY = newBot.tags.scaleY+0.25;\ntags.scaleZ = newBot.tags.scaleZ+0.25;",
                "ab-skillStateNewEmptyOnExit": "@var newBot = getBot(\"ab-id\", \"newTemplate\");\n\ndestroy(newBot);\n\n//resets size\ntags.scaleX = tags.scaleX-0.25;\ntags.scaleY = tags.scaleY-0.25;\ntags.scaleZ = tags.scaleZ-0.25;",
                "color": "clear",
                "onPointerExit": "@tags.label = null;",
                "onPointerEnter": "@//updates skill bots\nwhisper(getBots(\"ab-id\", \"skill\"), \"onDrop\");\ntags.label = \"|||\"",
                "onClick": "@if (tags[\"ab-skillState\"] != \"Builder\") {\n    //resets state to original\n    changeState(this, \"Builder\", \"ab-skillState\");\n    \n}\nelse {\n    if (tags[\"ab-menuState\"] == \"Open\") {\n        //closes menu\n        changeState(this, \"Closed\", \"ab-menuState\");\n    }\n    else if (tags[\"ab-menuState\"] == \"Closed\") {\n        //opens menu\n        changeState(this, \"Open\", \"ab-menuState\");\n    }\n}\n//intention repositions\nshout(\"intentionReset\")",
                "ab-skillStateNewCloneOnEnter": "@var newBot = getBot(\"ab-id\", \"newTemplate\");\n\n//expands to take in the new represenation bot\n\nif (newBot.tags.scaleX != null){\n    tags.scaleX = newBot.tags.scaleX+0.25;\n}\n\nif (newBot.tags.scaleY != null){\n    tags.scaleY = newBot.tags.scaleY+0.25;\n}\n\nif (newBot.tags.scaleZ != null){\n    tags.scaleZ = newBot.tags.scaleZ+0.25;\n}\n\nif (newBot.tags.scale != null){\n    tags.scale = newBot.tags.scale * 1.5;\n}",
                "ab-skillStateNewCloneOnExit": "@//resets size\ntags.scaleX = 1;\ntags.scaleY = 1;\ntags.scaleZ = 1;\ntags.scale = 1;\n\n//destroy template bot\nvar newBot = getBot(\"ab-id\", \"newTemplate\");\n\ndestroy(newBot);",
                "ab-updateID": "b8085119-1947-4522-aa1c-f8b0c35c78d2",
                "destroyable": "false",
                "ab-menuStateOpenOnEnter": "@//sets up the menu\nshout(\"ab-menu\");\n",
                "ab-menuStateClosedOnEnter": "@//clears menu and selected bot\nshout(\"ab-menuReset\");\nplayer.getBot().tags.currentSelection = null;\nplayer.getBot().tags.menuPortal = player.getBot().tags.previousMenu\nplayer.getBot().tags.previousMenu = null;",
                "onDrag": "@if (tags[\"ab-skillState\"] == \"NewEmpty\") { //new empty drag logic\n\n    var newBot = getBot(\"ab-id\", \"newTemplate\");\n    \n    let createBot = create(newBot,{\n        space: \"shared\",\n        \"positioningMode\": null,\n        \"ab-id\": null\n    })\n\n    player.replaceDragBot(createBot);\n}\nelse if (tags[\"ab-skillState\"] == \"NewClone\"){ //clone drag logic\n\n    var newBot = getBot(\"ab-id\", \"newTemplate\");\n    \n    let createBot = create(newBot,{\n        space: \"shared\",\n        \"positioningMode\": null,\n        \"draggable\": true,\n        \"ab-id\": null\n    })\n\n    player.replaceDragBot(createBot);\n}\nelse { //normal selector dragging\n    shout(\"ab-gridClick\")\n\n    let arm = create(getBot(\"ab-id\", \"armTemplate\"), {\n        space: \"tempLocal\",\n        \"listening\": true,\n        \"destroyable\": true,\n        \"ab-id\": \"arm\"\n    })\n\n    player.replaceDragBot(arm);\n}\n\n"
            }
        },
        {
            "id": "44c1c162-c713-4eeb-91b8-f59c45df6d9a",
            "space": "shared",
            "tags": {
                "ab-1": true,
                "lineStyle": "line",
                "labelSize": "2",
                "ab-skill": "Sheet in New Tab",
                "ab-1SortOrder": 0,
                "positioningMode": "absolute",
                "ab-weight": "0",
                "ab-target": "none",
                "destroyable": "false",
                "scale": 1,
                "strokeColor": "#F28705",
                "scaleX": "0.9",
                "scaleY": "0.9",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-state": "Active",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-skillAction": "@//takes player to current dimensions build sheet\nif(player.getBot().tags.currentSelection == null){\n    player.openURL(\"https://auxplayer.com/?story=\"+player.getCurrentStory()+\"&sheetPortal=\"+player.getCurrentDimension());\n}\nelse{\n    player.openURL(\"https://auxplayer.com/?story=\"+player.getCurrentStory()+\"&sheetPortal=\"+player.getBot().tags.currentSelection)\n}",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-updateID": "41c90ce2-4dbe-4446-be23-e7861fe098a8",
                "ab-1X": 2,
                "ab-1Y": 9,
                "ab-manualWeight": 5,
                "color": "#e666a1",
                "labelPosition": "top",
                "ab-autoWeight": 0,
                "totalWeight": 5,
                "scaleZ": 2.5,
                "lineTo": "= getBot('id', '9f6f8d09-e67a-4245-87e7-180775fcf5fc');"
            }
        },
        {
            "id": "4c8f1a27-da01-4f76-ba5a-094c2fcfede2",
            "space": "shared",
            "tags": {
                "creator": "9f6f8d09-e67a-4245-87e7-180775fcf5fc",
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-updateID": "50cb4b05-1633-43e2-837a-d3c58a42cb6c",
                "ab-upadteID": "200fdb39-f1e8-43ee-9614-bc5257692de6",
                "ab-skill": "Deploy ab-1",
                "ab-skillContext": "ab-1",
                "ab-state": "Active",
                "ab-skillAction": "@const story = await player.showInput(\"ab-1\", {\r\n    title: 'Where do you want to deploy?'\r\n});\r\n\r\nif (!story) {\r\n    player.toast(\"Invalid story.\");\r\n    return;\r\n}\r\nawait server.browseHistory();\r\nawait server.markHistory({\r\n    message: `Save before deploy to ${story}`\r\n});\r\n\r\nlet historyBots = getBots(byTag('#history', true), byTag('markHash'));\r\nlet targetMark = null;\r\nfor(let b of historyBots) {\r\n    if (!targetMark) {\r\n        targetMark = b;\r\n    } else if (targetMark.tags.markTime < b.tags.markTime) {\r\n        targetMark = b;\r\n    }\r\n}\r\n\r\nif (!targetMark) {\r\n    console.log('No Mark!');\r\n    return;\r\n}\r\n\r\nawait server.restoreHistoryMarkToStory(targetMark, story);\r\nplayer.toast(`Deployed ab-1 to ${story}!`);",
                "ab-1X": -4,
                "ab-1Y": 7,
                "ab-manualWeight": 4,
                "color": "#e66694",
                "labelPosition": "top",
                "lineTo": "= getBot('id', '44c1c162-c713-4eeb-91b8-f59c45df6d9a');",
                "ab-autoWeight": 0,
                "totalWeight": 4,
                "scaleZ": 2
            }
        },
        {
            "id": "5157d784-fc75-46ca-963a-c26349b0a725",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "single",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-skillAction": "@let copyBotTemplate = getBot(\"id\", player.getBot().tags.currentSelection);\n\nif (player.getBot().tags.currentSelection != null) {\n    const json = getJSON(copyBotTemplate);\n    player.setClipboard(json);\n    player.toast(\"Copied!\");\n}",
                "ab-skill": "Copy Bot to Clipboard",
                "onPaste": "@let botPaste = JSON.parse(that.text)\n//let b = create(botPaste)\n\n//b.tags[player.getCurrentDimension()] = true;\n//b.tags.creator = null;\nshout(\"ab-cloneSkill\", botPaste);",
                "ab-autoWeight": 0,
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "scaleZ": 0.5,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-1X": -13,
                "ab-1Y": -2,
                "ab-state": "Inactive",
                "color": "lightgray",
                "ab-updateID": "36d6d7eb-3e53-4e00-b100-db1adeca4807",
                "labelPosition": "top"
            }
        },
        {
            "id": "6da071c4-90ff-435c-ac2f-0774d6b71f5c",
            "space": "shared",
            "tags": {
                "ab-1": true,
                "ab-weight": "0",
                "lineStyle": "line",
                "labelSize": 2,
                "ab-skill": "Create Empty Bot",
                "ab-1SortOrder": 0,
                "positioningMode": "absolute",
                "ab-target": "none",
                "destroyable": "false",
                "scaleX": "0.9",
                "scaleY": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-autoWeight": 0,
                "scaleZ": 0.5,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "ab-skillAction": "@//sets up making empty bots on ab-1\nlet o = {};\no.space = \"tempLocal\";\no.scaleX = 1;\no.scaleY = 1;\no.scaleZ = 1;\n\nshout(\"ab-createSkill\", o);",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-1Y": -2,
                "ab-1X": -10,
                "ab-state": "Inactive",
                "color": "lightgray",
                "ab-updateID": "7b9e11a1-88cf-4766-99db-e4fe6ba62201",
                "labelPosition": "top"
            }
        },
        {
            "id": "6eced190-f719-41bd-be26-aa6216f1db22",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-skill": "Restore History",
                "ab-skillAction": "@player.showInputForTag(this, \"markTarget\");",
                "ab-autoWeight": 0,
                "onSaveInput": "@server.browseHistory();\n\nif (getBot(\"label\", tags.markTarget) != null) {\n    server.restoreHistoryMark(getBot(\"label\", tags.markTarget));\n    player.toast(tags.markTarget + \" mark loaded\")\n}\nelse {\n    player.toast(\"invalid mark name\")\n}",
                "markTarget": "mark003",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-state": "Inactive",
                "scaleZ": 0.5,
                "color": "lightgray",
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "ab-1Y": -2,
                "ab-1X": -12,
                "ab-updateID": "dfb56bfc-361b-439e-a1ca-9cae632c556c",
                "labelPosition": "top"
            }
        },
        {
            "id": "7db58316-b901-4199-b068-91b771b63f72",
            "space": "shared",
            "tags": {
                "ab-1": true,
                "ab-1SortOrder": 0,
                "ab-id": "core",
                "scaleX": "0.2",
                "scaleY": "0.2",
                "lineStyle": "line",
                "ab-1X": 0,
                "draggable": "false",
                "positioningMode": "absolute",
                "destroyable": "false",
                "refreshPossibilities": "@//logic for when the next button is clicked\nsetTimeout(() => whisper(this, \"ab-menu\"), 205);",
                "ab-1Z": "-3",
                "scaleZ": "0.2",
                "strokeColor": "clear",
                "lineColor": "gray",
                "ab-1Y": "1",
                "lineRefresh": "@tags.lineTo = null;",
                "ab-1Setup": "here",
                "newSetup": "@let botData = getBots(\"ab-1Setup\", \"here\");\nlet toData = JSON.stringify(botData)\n\nsuperShout(\"triggerSetup\", toData)",
                "onPlayerPortalChanged": "@// if (that.portal == \"pagePortal\"){\n//     if(that.dimension == \"ab-1\"){\n//         whisper(getBots(\"ab-id\", \"skill\"), \"onCreate\");\n//     }\n// }a",
                "onStorySubscribed": "@if (that.story == \"builderPractice09\"){\n    superShout(\"updateCheck\", tags[\"ab-version\"]);\n}",
                "onCreate": "@setTag(getBots(\"ab-id\", \"skill\"), \"configBot\", getID(getBot(\"ab-id\", \"skillConfig\")));\n\ntags.updateNow = tags.updateTemplate;\n\ntags.updateCheck = null;\n\ntags[\"ab-update\"] = `@player.loadStory(\"builderPractice09\");`",
                "ab-update": "@player.loadStory(\"builderPractice09\");",
                "lineSetup": "@\n//logic to get a line to the lowest skill number\nfor (let i = 0; i < 20; i++) {\n    let targetBot = getBot(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\" }));\n\n    if (targetBot != null) {\n        tags.lineTo = \"= getBots('ab-id', 'skill')\";\n        whisper(targetBot, \"lineSetup\");\n        return;\n    }\n    else {\n        continue;\n    }\n}",
                "updateNow": "@let newData = that;\nlet dataOutput = JSON.parse(newData)\n\nfor (let i = 0; i < dataOutput.length; i++) {\n    if (dataOutput[i].tags[\"ab-id\"] != \"skill\") {\n\n        if (getBot(\"ab-id\", dataOutput[i].tags[\"ab-id\"]) != null || getBot(\"ab-id\", dataOutput[i].tags[\"ab-id\"]) != undefined){\n            setTag(getBot(\"ab-id\", dataOutput[i].tags[\"ab-id\"]), \"destroyable\", true);\n            destroy(getBot(\"ab-id\", dataOutput[i].tags[\"ab-id\"]));\n        }\n\n        let b = create(dataOutput[i].tags);\n        b.tags.creator = null\n        console.log(dataOutput[i].tags)\n    }\n}\n\nplayer.unloadStory(\"builderPractice09\");\n\n// setTag(getBots(\"ab-id\", \"skill\"), \"configBot\", getID(getBot(\"ab-id\", \"skillConfig\")));\n// whisper(this, \"onCreate\");",
                "updateTemplate": "@let newData = that;\nlet dataOutput = JSON.parse(newData)\n\nfor (let i = 0; i < dataOutput.length; i++) {\n    if (dataOutput[i].tags[\"ab-id\"] != \"skill\") {\n\n        if (getBot(\"ab-id\", dataOutput[i].tags[\"ab-id\"]) != null || getBot(\"ab-id\", dataOutput[i].tags[\"ab-id\"]) != undefined){\n            setTag(getBot(\"ab-id\", dataOutput[i].tags[\"ab-id\"]), \"destroyable\", true);\n            destroy(getBot(\"ab-id\", dataOutput[i].tags[\"ab-id\"]));\n        }\n\n        let b = create(dataOutput[i].tags);\n        b.tags.creator = null\n        console.log(dataOutput[i].tags)\n    }\n}\n\nplayer.unloadStory(\"builderPractice09\");\n\n// setTag(getBots(\"ab-id\", \"skill\"), \"configBot\", getID(getBot(\"ab-id\", \"skillConfig\")));\n// whisper(this, \"onCreate\");",
                "menuLine": "@let lineArray = []\n\n//grab the appropriate bots\nfor (let i = 20; i > 0; i--) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\" }));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        if (targetBots[j] != null) {\n            //filter out skills that are not active\n            if (getBot(byMod({ \"label\": targetBots[j].tags[\"ab-skill\"], \"menu\": false })) == null) {\n                //grab the actual bots that are in th menu\n                if (getBot(\"label\", targetBots[j].tags[\"ab-skill\"]) != null) {\n                    //implement them in the line array\n                    if (lineArray.length < 3) {\n                        let newID = String(targetBots[j].tags.id)\n                        lineArray.push(newID);\n                    }\n                }\n            }\n        }\n    }\n}\n\ntags.lineTo = getID(this);\n//creates a new separate bot to draw lines from\nfor (let j = 0; j < 3; j++) {\n    create(null, {\n        space: \"tempLocal\",\n        \"ab-1\": true,\n        \"ab-menuReset\": \"@destroy(this)\",\n        \"color\": \"clear\",\n        \"pointable\": false,\n        \"lineStyle\": \"line\",\n        \"positioningMode\": \"absolute\",\n        \"ab-1X\": tags[\"ab-1X\"],\n        \"ab-1Y\": tags[\"ab-1Y\"],\n        \"ab-1Z\": tags[\"ab-1Z\"],\n        \"menuLine\": \"@tags['ab-1'] = false\",\n        \"refreshPossibilities\": \"@tags['ab-1'] = false\",\n        \"lineTo\": \"=getBot('id', '\" + lineArray[j] + \"')\"\n    })\n}",
                "onStoryStreaming": "@//setting up the sounds for footprints on the player bot\nplayer.getBot().tags.nextSound = 1;",
                "onKeyUp": "@if (that.keys.indexOf(\"Shift\") < 0) {   \n    return;\n}\n\ntags.shiftDown = false;",
                "onKeyDown": "@//chat short key\nif (that.keys == \"`\"){\n    player.showChat();\n}\n\nlet meetAnchor = getBot(\"meetPortalAnchorPoint\");\n\nif (that.keys == \"Escape\" && meetAnchor != null){\n    setTag(meetAnchor, \"meetPortalAnchorPoint\", \"topLeft\")\n}\n\n\nif (that.keys.indexOf(\"Shift\") < 0) {   \n    return;\n}\n\ntags.shiftDown = true;",
                "ab-updateID": "1d0e20e9-b438-459b-97bb-01f2b9b26b8b",
                "ab-version": "27",
                "onChat": "@if (that.message == \"download\") {\n    player.downloadStory();\n    player.hideChat();\n}\nelse if (that.message == \"upload\") {\n    player.showUploadfile();\n    player.hideChat();\n}\nelse {\n    player.run(that.message);\n    player.hideChat();\n}",
                "ab-moveHere": "@//kills current instance\nshout(\"ab-1Reset\");\n\nplayer.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n\n//new instance at the correct location\nlet ab1 = getBot(\"ab-id\", \"ab1Template\");\n\ncreate(ab1, {\n    space: \"tempLocal\",\n    \"lineTo\": \"=getBot('ab-id', 'arm')\",\n    [that.dimension]: true,\n    [that.dimension + \"X\"]: that.positionX,\n    [that.dimension + \"Y\"]: that.positionY,\n    \"listening\": true,\n    \"destroyable\": true,\n    \"ab-id\": \"ab1\"\n})\n\n//intention creation\nlet intention = getBot(\"ab-id\", \"intention\");\n\nif (intention == null){\n    create(getBot(\"ab-id\", \"intentionTemplate\"), {\n        space: \"tempLocal\",\n        \"listening\": true,\n        \"ab-1\": true\n    })\n}",
                "color": "clear",
                "ab-internalVersion": "1",
                "onWebhook": "@if (that.method === 'GET') {\r\n    const url = new URL(that.url);\r\n    if (url.pathname.endsWith('/ab-1/version')) {\r\n        return {\r\n            data: {\r\n                version: tags[\"ab-version\"],\r\n                internalVersion: tags[\"ab-internalVersion\"]\r\n            }\r\n        };\r\n    } else if(url.pathname.endsWith('/ab-1/download')) {\r\n        let botData = getBots(\"ab-1Setup\", \"here\");\r\n        return {\r\n            data: {\r\n                version: tags[\"ab-version\"],\r\n                internalVersion: tags[\"ab-internalVersion\"],\r\n                data: botData\r\n            }\r\n        };\r\n    }\r\n}",
                "updateFromStory": "@const story = that || \"ab-1\";\r\nconst response = await webhook({\r\n    method: \"GET\",\r\n    url: `https://auxplayer.com/webhook/ab-1/download?story=${encodeURIComponent(story)}`\r\n});\r\n\r\nif (response.status !== 200) {\r\n    console.log('[ab-1] Could not download update.');\r\n    return;\r\n}\r\n\r\nconst newVersion = response.data.internalVersion;\r\nif (newVersion <= tags['ab-internalVersion']) {\r\n    console.log('[ab-1] Up to date!');\r\n    return;\r\n}\r\n\r\nconst dataOutput = response.data.data;\r\nconst skillTagDenyList = [\r\n    'ab-1X',\r\n    'ab-1Y',\r\n    'ab-1Z',\r\n    'ab-state',\r\n    'ab-autoWeight',\r\n    'ab-manualWeight',\r\n    'label'\r\n];\r\n\r\nfor (let i = 0; i < dataOutput.length; i++) {\r\n    const newBot = dataOutput[i];\r\n    const oldBot = getBot(\"ab-updateID\", newBot.tags[\"ab-updateID\"]);\r\n    let doCreate = true;\r\n    if (oldBot) {\r\n        if (oldBot.tags[\"ab-id\"] === \"skill\") {\r\n            doCreate = false;\r\n            const newTags = Object.keys(newBot.tags);\r\n            for (let tag of newTags) {\r\n                if (skillTagDenyList.indexOf(tag) < 0) {\r\n                    oldBot.tags[tag] = newBot.tags[tag];\r\n                }\r\n            }\r\n        } else {\r\n            oldBot.tags.destroyable = true;\r\n            destroy(oldBot);\r\n        }\r\n    }\r\n\r\n    if (doCreate) {\r\n        let b = create(newBot.tags);\r\n        b.tags.creator = null;\r\n    }\r\n}\r\n\r\nconsole.log('[ab-1] Updated!');\r\nplayer.toast('Updated ab-1!');",
                "ab-menu": "@//deselect sticky note\nwhisper(player.getBot(), \"onGridClick\")\n\n//setting up the menu portal\nif (player.getBot().tags.menuPortal != \"menu\") {\n    player.getBot().tags.previousMenu = player.getMenuDimension();\n    player.getBot().tags.menuPortal = \"menu\";\n}\n\nlet currentDim = player.getCurrentDimension();\n\n//select the appropriately weight skills and add them to the menu\nfor (let i = 30; i > 0; i--) {\n    if (player.getBot().tags.currentSelection != null) { //if a bot was targeted with the arm or selector\n        var currentWeightBots = getBots(byMod({ \"ab-id\": \"skill\", \"ab-state\": \"Active\", \"totalWeight\": i }));\n    }\n    else {\n        //this checks to see if there are context specific skills\n        if (getBots(byMod({ \"ab-id\": \"skill\", \"ab-state\": \"Active\", \"ab-skillContext\": currentDim, \"totalWeight\": i })).length > 0) {\n            var currentWeightBots = getBots(byMod({ \"ab-id\": \"skill\", \"ab-state\": \"Active\", \"ab-target\": \"none\", \"totalWeight\": i }));\n        }\n        //vanilla menu selection\n        else {\n            var currentWeightBots = getBots(byMod({ \"ab-id\": \"skill\", \"ab-state\": \"Active\", \"ab-skillContext\": null, \"totalWeight\": i }));\n        }\n    }\n\n    if (currentWeightBots.length > 0) { //actual implementation of the menu bots\n        for (let j = currentWeightBots.length; j > -1; j--) {\n            let currentBot = currentWeightBots[j]\n            let menuBots = getBots(\"menu\", true).length;\n\n            if (currentBot != null) {\n\n                if (getBot(\"label\", currentBot.tags[\"ab-skill\"]) != null) {\n                    continue;\n                }\n                else {\n\n                    if (menuBots < 3) { //3 menu buttons plus the next button\n                        create(null, {\n                            space: \"tempLocal\",\n                            \"menu\": true,\n                            \"label\": currentBot.tags[\"ab-skill\"],\n                            \"onClick\": \"@whisper(getBot('id', tags['ab-target']), 'ab-intentionEnter'); whisper(getBot('id', tags['ab-target']), 'ab-skillAction');\",\n                            \"ab-menuReset\": \"@destroy(this)\",\n                            \"ab-target\": currentBot.id,\n                            \"refreshPossibilities\": \"@tags.menu = false\"\n                        })\n                    }\n                }\n            }\n        }\n    }\n}\n\nlet menuBots = getBots(\"menu\", true).length;\n\nif (menuBots > 0) { //next button\n    create(null, {\n        space: \"tempLocal\",\n        \"menu\": true,\n        \"label\": \"...\",\n        \"ab-id\": \"*\",\n        \"onClick\": \"@shout('refreshPossibilities'); destroy(this);\",\n        \"ab-menuReset\": \"@destroy(this)\",\n    })\n}\nelse {\n    let ab = getBot(\"ab-id\", \"ab1\")\n    player.toast(\"no additional options\")\n    changeState(ab, \"Closed\", \"ab-menuState\");\n}\n\n//time delayed line logic\nsetTimeout(() => whisper(this, \"menuLine\"), 100);",
                "onGridClick": "@let template = getBot(\"ab-id\", \"stickyTemplate\");\nlet currentDim = player.getCurrentDimension();\n\nif (!player.getInputState(\"keyboard\", \"Shift\")) {\n    //footprint template bot\n    let footPrint = getBot(byTag(\"ab-id\", \"footprintTemplate\"));\n\n    //create new footprint\n    create(footPrint, {\n        space: \"tempLocal\",\n        \"ab-id\": null,\n        [that.dimension]: true,\n        [that.dimension + \"X\"]: that.position.x,\n        [that.dimension + \"Y\"]: that.position.y,\n        \"destroyable\": true,\n        \"listening\": true\n    })\n\n    //grid sounds and other logic\n    shout(\"ab-gridClick\")\n}\nelse {\n    create(template, {\n        \"creator\": null,\n        \"listening\": true,\n        \"destroyable\": true,\n        \"label\": \" \",\n        \"ab-1\": null,\n        \"ab-id\": null,\n        [currentDim]: true,\n        [currentDim + \"X\"]: that.position.x,\n        [currentDim + \"Y\"]: that.position.y,\n    })\n}",
                "lineTo": "= getBots('ab-id', 'skill')",
                "shiftDown": false
            }
        },
        {
            "id": "89ebdf0c-e015-4a3f-95b1-3a01ad3f8d35",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-skill": "VR Exit Button",
                "ab-autoWeight": 0,
                "ab-skillAction": "@//sets up making a vr button\nlet o = {};\no.space = \"tempLocal\";\no.onClick = `@ player.disableVR();`;\no.label = \"Exit VR\";\no.scaleX = 2;\no.scaleY = 1;\no.scaleZ = 0.61;\n\nshout(\"ab-createSkill\", o);",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "scaleZ": 0.5,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "ab-1Y": -2,
                "ab-1X": -9,
                "ab-state": "Inactive",
                "color": "lightgray",
                "ab-updateID": "43619fa3-6ef8-444b-90d1-3e40206915ed",
                "labelPosition": "top"
            }
        },
        {
            "id": "8d020a6e-e52a-43e5-aa1b-05a33cb07682",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-skillAction": "@player.showInputForTag(this, \"markTarget\");",
                "ab-skill": "Mark History",
                "onSaveInput": "@server.markHistory({message: tags.markTarget});\n\nplayer.toast(tags.markTarget+ \" mark has been made.\")",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-state": "Active",
                "markTarget": "beforeLosingConfigTags",
                "ab-autoWeight": 0,
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-1Y": 15,
                "ab-manualWeight": 8,
                "totalWeight": 8,
                "scaleZ": 4,
                "color": "#e666c8",
                "ab-updateID": "6738f60f-df43-4139-a420-c39c83502033",
                "ab-1X": -3,
                "labelPosition": "top",
                "lineTo": "= getBot('id', '315e773b-f9f5-4b0a-aee2-14c41a129228');"
            }
        },
        {
            "id": "9c2a6005-a476-4273-8a3a-45118bd1e9e4",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "ab-1X": -7,
                "scaleZ": "0.01",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "ab-1Y": -3,
                "ab-id": "armTemplate",
                "ab-1": "here",
                "strokeColor": "#FF9400",
                "ab-1Reset": "@destroy(this);",
                "ab-gridClick": "@destroy(this);",
                "ab-menuReset": "@destroy(this);",
                "listening": "false",
                "ab-1Setup": "here",
                "onDrop": "@if (that.to.bot == null) { //moves ab to dragged location\n    let currentDim = player.getCurrentDimension()\n    shout(\"ab-moveHere\", { \"dimension\": currentDim, \"positionX\": tags[currentDim + \"X\"], \"positionY\": tags[currentDim + \"Y\"] });\n    //destroy(this);\n}\nelse if (that.to.bot.tags[\"ab-id\"] == \"skill\"){\n    destroy(this);\n}\nelse{ //opens menu with the selected bot targeted\n    tags.positioningMode = \"absolute\";\n    tags.scaleZ = that.to.bot.scaleZ;\n    tags.pointable = false;\n    tags.strokeColor = \"clear\";\n    player.getBot().tags.currentSelection = that.to.bot.id; //need to change this to be on the current builder instance\n    whisper(getBot(\"ab-id\", \"core\"), \"ab-menu\");\n    console.log(\"happening here\");\n    getBot(\"ab-id\", \"ab1\").tags[\"ab-menuState\"] = \"Open\";\n    //destroy(this);\n}",
                "color": "clear",
                "onDropEnter": "@tags.scale = 1.2;",
                "onDropExit": "@tags.scale = 1;",
                "ab-updateID": "e7035d2d-c613-4fa9-ad79-b541559ea719",
                "destroyable": "false"
            }
        },
        {
            "id": "9f6f8d09-e67a-4245-87e7-180775fcf5fc",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "ab-skill": "New Skill",
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "ab-skillContext": "ab-1",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-state": "Active",
                "ab-updateID": "50cb4b05-1633-43e2-837a-d3c58a42cb6c",
                "ab-skillAction": "@//will create a new empty skill\nlet newSkill = create(this, {\n    \"ab-skill\": \"Created Skill #\"+getBots(\"ab-id\", \"skill\").length,\n    \"ab-skillAction\": null,\n    \"ab-skillContext\": null,\n    \"ab-upadteID\": uuid(),\n    \"color\": \"clear\",\n    \"ab-1X\": 0,\n    \"ab-1Y\": 0,\n})\n\nplayer.showInputForTag(newSkill, \"ab-skillAction\")",
                "ab-1X": -5,
                "ab-1Y": 11,
                "ab-manualWeight": 6,
                "color": "#e666ae",
                "labelPosition": "top",
                "lineTo": "= getBot('id', '8d020a6e-e52a-43e5-aa1b-05a33cb07682');",
                "ab-autoWeight": 0,
                "totalWeight": 6,
                "scaleZ": 3
            }
        },
        {
            "id": "a40548f7-b55f-4f1a-95af-2ec1f40c91fd",
            "space": "shared",
            "tags": {
                "creator": "9f6f8d09-e67a-4245-87e7-180775fcf5fc",
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-updateID": "50cb4b05-1633-43e2-837a-d3c58a42cb6c",
                "ab-upadteID": "6de40592-66ea-4908-8876-9dfc4ff0038c",
                "ab-skillAction": "@shout(\"updateFromStory\");",
                "ab-1Y": 2,
                "ab-manualWeight": 1,
                "ab-autoWeight": 0,
                "totalWeight": 1,
                "scaleZ": 0.5,
                "ab-skill": "Update ab-1",
                "ab-skillContext": "ab-1",
                "ab-state": "Active",
                "color": "#e66673",
                "ab-1X": 3,
                "lineTo": "= getBot('id', 'aa2ac472-1648-4cb7-bbac-254e53aa034a');",
                "labelPosition": "top"
            }
        },
        {
            "id": "aa2ac472-1648-4cb7-bbac-254e53aa034a",
            "space": "shared",
            "tags": {
                "ab-1": true,
                "ab-1SortOrder": 0,
                "ab-id": "skill",
                "ab-skill": "Organize Skills",
                "ab-target": "none",
                "destroyable": "false",
                "labelColor": "black",
                "labelSize": "2",
                "lineColor": "#FF9400",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "scaleX": "0.9",
                "scaleY": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-state": "Active",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-skillAction": "@let skillBots = getBots(byMod({\"ab-id\": \"skill\", \"ab-state\": \"Active\"}))\n\nfor (let a = 0; a < skillBots.length; a++) {\n    let currentSkill = skillBots[a]\n\n    if (currentSkill.tags[\"ab-1Y\"] > 20) {\n        setTag(currentSkill, \"ab-1Y\", 19);\n    }\n    else if (currentSkill.tags[\"ab-1Y\"] < 0) {\n        setTag(currentSkill, \"ab-1Y\", 0);\n    }\n}\n\nlet odd = 0;\n\nfor (let i = 0; i < 21; i++) {\n    let skills = getBots(byMod({ \"ab-id\": \"skill\", \"ab-1Y\": i, \"ab-state\": \"Active\" }));\n\n    for (let j = 0; j < skills.length; j++) {\n        let currentSkill = skills[j];\n\n        if (odd % 2 == 0 || odd % 2 == 0.5) {\n            setTag(currentSkill, \"ab-1X\", math.randomInt(-5, -1));\n            console.log(\"ODD\")\n            odd++\n        }\n        else {\n            setTag(currentSkill, \"ab-1X\", math.randomInt(1, 5));\n            console.log(\"EVEN\")\n            odd++\n        }\n    }\n}",
                "ab-updateID": "7b5d8e55-9cd1-4c49-9f6a-1e3a6c3b1ece",
                "ab-skillContext": "ab-1",
                "ab-1Y": 4,
                "ab-manualWeight": 2,
                "color": "#e66680",
                "ab-1X": 2,
                "ab-autoWeight": 0,
                "totalWeight": 2,
                "scaleZ": 1,
                "labelPosition": "top",
                "lineTo": "= getBot('id', '160e3b95-222b-442d-8736-2cb7b4a264b5');"
            }
        },
        {
            "id": "aa71e9c4-53ad-43f0-987b-225010bfcf8c",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "ab-id": "footprintTemplate",
                "ab-1Y": -3,
                "ab-1X": -5,
                "draggable": "false",
                "ab-1": "here",
                "scaleZ": "0.01",
                "scaleY": "1.1",
                "scaleX": "1.1",
                "strokeColor": "#FF9400",
                "listening": "false",
                "ab-1Setup": "here",
                "onCreate": "@let nextSound = player.getBot().tags.nextSound;\n\nplayer.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderPrint0\"+nextSound+\".wav\")\n\n// logic to play sounds in the correct order\nif (nextSound == 3){\n    player.getBot().tags.nextSound = 1;\n}\nelse{\n    nextSound++;\n    player.getBot().tags.nextSound = nextSound;\n}\n\n//limited half life of footprint\nsetTimeout(() => destroy(this), 1000);",
                "color": "clear",
                "onClick": "@let currentDim = player.getCurrentDimension()\n\n//reset footprint sounds\nplayer.getBot().tags.nextSound = 1;\n\n//create ab-1 instance\nshout(\"ab-moveHere\", {\"dimension\":currentDim, \"positionX\": tags[currentDim+\"X\"], \"positionY\": tags[currentDim+\"Y\"]});\n\n//remove from dimension until this destroys itself\ntags[that.dimension] = null;",
                "ab-updateID": "e028b104-63fe-47d3-91e6-90da85c340d3",
                "destroyable": "false"
            }
        },
        {
            "id": "abb3423f-7612-4789-8cb2-1da8e3710469",
            "space": "shared",
            "tags": {
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-skill": "VR Setup Button",
                "ab-autoWeight": 0,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "scaleZ": 0.5,
                "ab-state": "Inactive",
                "color": "lightgray",
                "ab-skillAction": "@//sets up making a vr button\nlet o = {};\no.space = \"tempLocal\";\no.onClick = `@ player.enableVR();\nplayer.getBot().tags.leftWristPortal = \"inventory\";\n`;\no.label = \"Enable VR\";\no.scaleX = 2;\no.scaleY = 1;\no.scaleZ = 0.61;\n\nshout(\"ab-createSkill\", o);",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-1Y": -2,
                "ab-1X": -14,
                "ab-updateID": "396eaaf1-2ada-4eb6-9ffe-58b5cffd8118",
                "labelPosition": "top"
            }
        },
        {
            "id": "ce2afb4e-a779-4660-b73c-92dc7050b0e1",
            "space": "shared",
            "tags": {
                "ab-id": "stickyTemplate",
                "form": "sprite",
                "message": "type here",
                "scale": "3",
                "orientationMode": "billboard",
                "label": "Label Test",
                "changeStickyColor": "@const selectedSticky = player.getBot().tags.selectedSticky;\n\nif (selectedSticky) {\n    const color = await player.showInput('green', {\n        type: 'color',\n            title: 'Enter a custom color'\n    });\n\n    getBot(\"id\", selectedSticky).tags.color = color;\n    getBot(\"id\", selectedSticky).tags.Color = color;\n}\n",
                "Color": "#FCDC00",
                "draggable": false,
                "color": "#FCDC00",
                "listening": "false",
                "deleteSticky": "@destroy(this);",
                "clearStickySelect": "@destroy(getBots('playerStickyMenu',true));\ntags.draggable = false;\nplayer.getBot().tags.selectedSticky = null;\nplayer.getBot().tags.menuPortal = null;\ntags.color = tags.Color;",
                "ab-1": "here",
                "onSaveInput": "@console.log('Saving Input');\nwhisper(this, \"clearStickySelect\")",
                "onClick": "@if (player.getBot().tags.selectedSticky != getID(this)) {\n    if (player.getBot().tags.selectedSticky != null){\n        whisper(getBot(\"id\", player.getBot().tags.selectedSticky), \"clearStickySelect\")\n    }\n    \n    destroy(getBots('playerStickyMenu', true));\n\n    player.getBot().tags.selectedSticky = getID(this);\n\n    tags.color = \"aqua\";\n\n    tags.draggable = true;\n\n    setTag(player.getBot(), \"menuPortal\", \"playerStickyMenu\");\n    setTag(player.getBot(), \"onGridClick\", \"@whisper(getBot('id','\"+getID(this)+\"'), 'clearStickySelect'); tags.onGridClick = null;\");\n\n    create({\n        space: \"tempLocal\",\n        playerStickyMenu: true,\n        label: \"Color\",\n        targetSticky: getID(this),\n        onClick: \"@whisper(getBot('id', tags.targetSticky), 'changeStickyColor'); whisper(getBot('id', tags.targetSticky), 'clearStickySelect');\"\n    })\n\n    create({\n        space: \"tempLocal\",\n        playerStickyMenu: true,\n        label: \"Delete\",\n        targetSticky: getID(this),\n        onClick: \"@whisper(getBot('id', tags.targetSticky), 'clearStickySelect'); whisper(getBot('id', tags.targetSticky), 'deleteSticky');\"\n    })\n}else{\n    \n    player.showInputForTag(this, \"label\");\n\n}",
                "labelSize": "=Math.min((1 / (tags.label.length * 0.06)) * tags.scale,0.5*tags.scale);",
                "ab-1Setup": "here",
                "ab-updateID": "62e4b0e0-7bbf-448a-b668-083a28c1d4ca",
                "destroyable": "false"
            }
        },
        {
            "id": "d2df9705-b6b0-42b1-9721-eacdc8b88b24",
            "space": "shared",
            "tags": {
                "ab-1X": 0,
                "ab-1SortOrder": 0,
                "form": "sphere",
                "positioningMode": "absolute",
                "ab-1": "here",
                "ab-id": "intentionTemplate",
                "draggable": "false",
                "intentionMove": "@//move intention to the appropriate skill\ntags[\"ab-1Y\"] = that.positionY;\ntags[\"ab-1X\"] = that.positionX;\ntags[\"ab-1Z\"] = -1.5;",
                "scale": "0.75",
                "ab-1Z": "-3",
                "ab-1Reset": "@destroy(this);",
                "ab-gridClick": "@whisper(this, \"intentionReset\");",
                "onAnyBotDrag": "@whisper(this, \"intentionReset\");",
                "ab-1Y": "1",
                "intentionReset": "@//move intention back to the core/pylon\ntags[\"ab-1Y\"] = 1;\ntags[\"ab-1X\"] = 0;\ntags[\"ab-1Z\"] = -3;\n",
                "listening": "false",
                "ab-1Setup": "here",
                "color": "#FF9400",
                "ab-updateID": "24e8beab-b1d5-4329-b8de-a0cb7188e5dd",
                "destroyable": "false"
            }
        },
        {
            "id": "d5eaf4d1-0e59-40a2-be3e-47ac0daad91d",
            "space": "shared",
            "tags": {
                "ab-1": true,
                "ab-weight": "0",
                "lineStyle": "line",
                "labelSize": 2,
                "ab-skill": "Destroy Bot",
                "ab-1SortOrder": 0,
                "positioningMode": "absolute",
                "ab-target": "single",
                "destroyable": "false",
                "ab-skillAction": "@//destroys targeted bot and resets bots and player selection\ndestroy(getBot(\"id\", player.getBot().tags.currentSelection));\nplayer.getBot().tags.currentSelection = null;\nwhisper(getBot(\"ab-id\", \"arm\"), \"ab-gridClick\");",
                "scaleX": "0.9",
                "scaleY": "0.9",
                "strokeColor": "#F28705",
                "scale": "1",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-autoWeight": 0,
                "ab-updateID": "f4b3c239-df26-4938-9151-e15d30b9bbee",
                "ab-state": "Inactive",
                "scaleZ": 0.5,
                "color": "lightgray",
                "ab-1X": -7,
                "ab-1Y": -2,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "labelPosition": "top"
            }
        },
        {
            "id": "db8cf573-5451-4e3f-834f-e44638ca6f23",
            "space": "shared",
            "tags": {
                "ab-1": true,
                "ab-weight": "0",
                "lineStyle": "line",
                "labelSize": 2,
                "ab-skill": "Clone Bot",
                "ab-1SortOrder": 0,
                "positioningMode": "absolute",
                "ab-target": "single",
                "destroyable": "false",
                "strokeColor": "#F28705",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-1Setup": "here",
                "configBot": "1ce78c08-201c-4022-87dd-56cc4fdd6e0c",
                "ab-skillAction": "@//sets up the clone action on the ab-1 bot\nlet clonedBotTemplate = getBot(\"id\", player.getBot().tags.currentSelection);\n\nlet clonedBot = create(clonedBotTemplate,{\n    \"creator\": null,\n    space: \"tempLocal\"\n})\n\nshout(\"ab-cloneSkill\", clonedBot);\n\ndestroy(clonedBot)",
                "anchorPoint": "bottom",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-autoWeight": 0,
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-updateID": "8d2355c1-1d4e-4953-bd46-d98b9b8eafae",
                "ab-state": "Inactive",
                "scaleZ": 0.5,
                "color": "lightgray",
                "ab-1X": -8,
                "ab-1Y": -2,
                "ab-manualWeight": 1,
                "totalWeight": 1,
                "labelPosition": "top"
            }
        },
        {
            "id": "e285ecbb-77ab-4289-ae20-2701d676c714",
            "space": "shared",
            "tags": {
                "creator": "9f6f8d09-e67a-4245-87e7-180775fcf5fc",
                "ab-1SortOrder": 0,
                "destroyable": "false",
                "labelSize": "2",
                "lineStyle": "line",
                "positioningMode": "absolute",
                "ab-1": true,
                "ab-target": "none",
                "scaleY": "0.9",
                "scaleX": "0.9",
                "scale": "1",
                "strokeColor": "#F28705",
                "labelColor": "black",
                "lineColor": "#FF9400",
                "ab-id": "skill",
                "ab-weight": "0",
                "ab-1Setup": "here",
                "anchorPoint": "bottom",
                "ab-state": "Active",
                "onCreate": "@tags.configBot = getBot(\"ab-id\", \"skillConfig\").id\ntags.configBot = null;",
                "ab-adjust": "@//updates the total weight of the skill\ntags[\"totalWeight\"] = tags[\"ab-manualWeight\"] + tags[\"ab-autoWeight\"];\n\n//updates scale to communicate skill weight in the ab-1 dimension\nif (tags[\"ab-state\"] == \"Active\") {\n    tags.scaleZ = (tags[\"ab-manualWeight\"] * 0.5) + (tags[\"ab-autoWeight\"] * 0.5);\n\n    if (tags[\"ab-1Y\"] < 25 && tags[\"ab-1Y\"] > 0) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (tags[\"ab-1Y\"] * 0.00000039)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] >= 21) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (21 * 0.00000038)) | 0).toString(16)\n    }\n    else if (tags[\"ab-1Y\"] < 1) {\n        tags.color = '#' + ((1 << (24)) * (0.9 + (1 * 0.00000038)) | 0).toString(16)\n    }\n}\nelse {\n    tags.scaleZ = 0.5;\n    tags.color = \"lightgray\";\n}\n\n//gradient color ***need to add something to make it gray when not active\n\n\n//resets visual representation of skill bots\nshout(\"lineRefresh\");\n\n//sets up visual representation of skill bots\nwhisper(getBot(\"ab-id\", \"core\"), \"lineSetup\")",
                "ab-intentionExit": "@//reduces auto weight when not selected\nif (that != getID(this) && tags[\"ab-autoWeight\"] > 0){\n    tags[\"ab-autoWeight\"]--;\n}\n\n//adjusts overall weight\nwhisper(this, \"ab-adjust\");",
                "ab-intentionEnter": "@//move intention here on menu click\nshout(\"intentionMove\", {\"positionX\": tags[\"ab-1X\"], \"positionY\": tags[\"ab-1Y\"], \"positionZ\": tags[\"ab-1Z\"]})\n\n//increases weight if max is not yet achieved\nif (tags[\"ab-autoWeight\"] < 10){\n    tags[\"ab-autoWeight\"]++;\n}\n\n//updates visuals and overall weight of the bot\nwhisper(this, \"ab-adjust\");\n\n//intention holds onto last skill it was on\nshout(\"ab-intentionExit\", getID(this));",
                "ab-stateActiveOnEnter": "@//visualization of active skill\n//tags[\"ab-id\"] = \"skill\";\ntags.color = \"#FF530D\";\nwhisper(this, \"ab-adjust\");",
                "ab-stateInactiveOnEnter": "@//visualization of inactive skill\n//tags[\"ab-id\"] = \"inactiveSkill\";\ntags.lineTo = getID(this);\nwhisper(this, \"ab-adjust\");",
                "lineRefresh": "@//line reset\ntags.lineTo = null;",
                "lineSetup": "@//logic for skill chain visualization\nfor (let i = 1; i < 25; i++) {\n    let targetBots = getBots(byMod({ \"totalWeight\": i, \"ab-state\": \"Active\", \"ab-id\":  \"skill\"}));\n\n    for (let j = 0; j < targetBots.length; j++) {\n        let targetBot = targetBots[j];\n\n        //console.log(targetBot)\n        if (targetBot.id != getID(this)) {\n            if (targetBot.tags.lineTo == null) {\n                tags.lineTo = \"= getBot('id', '\" + getID(targetBot) + \"');\";\n                whisper(targetBot, \"lineSetup\");\n                return;\n            }\n            else{\n                tags.lineTo = \"= getBot('id', '\" + getID(this) + \"');\";\n            }\n        }\n    }\n}",
                "onClick": "@//skill state controller\nif (tags[\"ab-state\"] == \"Active\"){\n    changeState(this, \"Inactive\", \"ab-state\");\n}\nelse if (tags[\"ab-state\"] == \"Inactive\") {\n    changeState(this, \"Active\", \"ab-state\");\n}",
                "onDrag": "@//resets intention\nshout(\"intentionReset\");",
                "onDrop": "@//this ensures that skills will not stack on top of eachother\nif (that != null) {\n    if (that.to.bot != null && that.to.bot.tags[\"ab-id\"] == \"skill\") {\n        if (that.dragBot.tags.id == getID(this)) {\n            tags[\"ab-1X\"] = that.from.x;\n            tags[\"ab-1Y\"] = that.from.y;\n        }\n    }\n}\n\n//destroy the pathway/track bots\nshout(\"trackReset\");\n\nif (tags[\"ab-1Y\"] <= 1) {\n    tags[\"ab-manualWeight\"] = 1;\n}\nelse if (tags[\"ab-1Y\"] > 20) {\n    tags[\"ab-manualWeight\"] = 10;\n}\nelse {\n    let num01 = tags[\"ab-1Y\"] / 2\n    let num02 = num01;\n    let newWeight = Math.round(num02);\n    tags[\"ab-manualWeight\"] = newWeight\n}\n\n//updates visual and performant weight\nwhisper(this, \"ab-adjust\");\n\nif (that != null) {\n    player.playSound(\"https://casualsimulationassets.s3.us-west-2.amazonaws.com/files/builderBloop01.wav\");\n}",
                "onPointerDown": "@for (let i = 0; i < 20; i++){\n    create({\n        space: \"tempLocal\",\n        \"draggable\": false,\n        \"color\": \"clear\",\n        \"lineTo\": null,\n        \"scaleZ\": 0.01,\n        \"scaleX\": 3,\n        \"ab-1\": true,\n        \"pointable\": false,\n        \"labelColor\": tags.color,\n        \"labelSize\": 2,\n        \"label\": 20-i,\n        \"ab-1X\": \"=getTag(getBot('id', '\"+getID(this)+\"'), 'ab-1X')\",\n        \"ab-1Y\": i,\n        \"trackReset\": \"@destroy(this)\"\n    })\n}",
                "onPointerExit": "@//removes label\ntags.label = null;\ntags.labelPosition = \"top\";",
                "onPointerUp": "@//kill track\nshout(\"trackReset\");",
                "onPointerEnter": "@//shows a label bot to display current manual weight\ntags.label = `=tags[\"ab-skill\"]+\" \"+(21-tags.totalWeight);`\ntags.labelPosition = \"floating\";",
                "ab-skill": "Sheet Current Tab",
                "ab-skillAction": "@//takes player to current dimensions build sheet\r\nconst pb = player.getBot();\r\nif(player.getBot().tags.currentSelection == null){\r\n    pb.tags.sheetPortal = (player.getCurrentDimension());\r\n}\r\nelse{\r\n    pb.tags.sheetPortal = (player.getBot().tags.currentSelection);\r\n}",
                "ab-updateID": "5227b690-674d-457d-a0dd-f0a718f15531",
                "ab-1Y": 4,
                "ab-1X": -2,
                "ab-manualWeight": 2,
                "color": "#e66680",
                "labelPosition": "top",
                "ab-autoWeight": 1,
                "totalWeight": 3,
                "scaleZ": 1.5,
                "lineTo": "= getBot('id', '4c8f1a27-da01-4f76-ba5a-094c2fcfede2');"
            }
        }
    ]
}
